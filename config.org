
#+TITLE:XenHunt Config
#+AUTHOR: Evgeny Berlizov (XenHunt)
#+DESCRIPTION: XenHunt personal config for Emacs
#+STARTUP: showeverything

* Содержание 
:PROPERTIES:
:TOC:      :include all :depth 100 :force (nothing) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#base][Base]]
  - [[#fast-loading][Fast Loading]]
  - [[#scripts][Scripts]]
  - [[#load-scripts][Load Scripts]]
  - [[#evil-mode][Evil-Mode]]
  - [[#diminish][Diminish]]
  - [[#general-keybindigs][General Keybindigs]]
  - [[#emacs][Emacs]]
- [[#graphical-beauty][Graphical Beauty]]
  - [[#fonts][Fonts]]
  - [[#removing-bars][Removing Bars]]
  - [[#line-numbers][Line Numbers]]
  - [[#nerd-icons][Nerd-Icons]]
  - [[#all-the-icons][ALL-THE-ICONS]]
  - [[#doom-theme][Doom Theme]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#dashboard][Dashboard]]
  - [[#rainbow-mode][Rainbow-mode]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
- [[#org-mode][Org-Mode]]
  - [[#toc][Toc]]
  - [[#highlight-todo][Highlight TODO]]
  - [[#org-bullets][Org-Bullets]]
  - [[#org-tempo][Org Tempo]]
  - [[#org-headings-size][Org Headings Size]]
  - [[#org-auto-tangle][Org-Auto-Tangle]]
  - [[#org-roam][Org-Roam]]
  - [[#org-ql-roam][Org-QL-Roam]]
  - [[#org-fragtog][Org-Fragtog]]
  - [[#ob-async][OB-Async]]
  - [[#org-babel-load-languages][ORG-Babel-Load-Languages]]
- [[#git-packages][Git Packages]]
  - [[#git-time-machine][Git-Time Machine]]
  - [[#magit][Magit]]
- [[#defaults][Defaults]]
- [[#sudo-edit][SUDO EDIT]]
- [[#which-key][Which-key]]
- [[#dired][Dired]]
  - [[#base-0][Base]]
  - [[#dired-open][Dired-open]]
  - [[#peep-dired][Peep-Dired]]
- [[#projectile][Projectile]]
- [[#imenu][Imenu]]
  - [[#imenu-list][Imenu-List]]
- [[#ibuffer][IBuffer]]
  - [[#nerd-icons-ibuffer][Nerd-Icons-IBuffer]]
- [[#completion][Completion]]
  - [[#flycheck][Flycheck]]
  - [[#lsp][LSP]]
  - [[#corfu][Corfu]]
    - [[#nerd-icons-0][Nerd-Icons]]
  - [[#dabbrev][Dabbrev]]
  - [[#cape][Cape]]
  - [[#orderless][Orderless]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#consult][Consult]]
- [[#shell][Shell]]
  - [[#vterm][VTerm]]
- [[#direnv][Direnv]]
- [[#programming-language][Programming Language]]
  - [[#lsp-mode][LSP-Mode]]
  - [[#dap-mode][DAP-Mode]]
  - [[#python][Python]]
  - [[#jupyter][Jupyter]]
:END:

* Base
:PROPERTIES:
:CUSTOM_ID: base
:END:

** Fast Loading 
:PROPERTIES:
:CUSTOM_ID: fast-loading
:END:
#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src
** Scripts
:PROPERTIES:
:CUSTOM_ID: scripts
:END:
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/scripts/")
#+end_src

** Load Scripts 
:PROPERTIES:
:CUSTOM_ID: load-scripts
:END:
#+begin_src emacs-lisp
(require 'elpaca-setup)
(require 'buffer-move)
(require 'macros)
#+end_src
** Evil-Mode
:PROPERTIES:
:CUSTOM_ID: evil-mode
:END:
#+begin_src emacs-lisp
    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (evil-mode)
      :config
      (evil-define-key 'normal 'global (kbd "g c") 'comment-line)
      (evil-define-key 'visual 'global (kbd "g c") 'comment-dwim)
      )
    (elpaca-wait)
    (use-package evil-collection :ensure t :demand t
      :after evil
      :config
      (setq evil-collection-mode-lis '(dashboard dired ibuffer))
      (evil-collection-init))
    (use-package evil-tutor :ensure t :demand t)
    (elpaca-wait)

  (after! 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
  ;; Setting RETURN key in org-mode to follow links
    (setq org-return-follows-link  t)


#+end_src
**  Diminish 
:PROPERTIES:
:CUSTOM_ID: diminish
:END:
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
** General Keybindigs
:PROPERTIES:
:CUSTOM_ID: general-keybindigs
:END:

#+begin_src emacs-lisp
(use-package general :ensure t :demand t
  :config
  (general-evil-setup)
  (general-create-definer leader-key
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")
  (leader-key
    "b" '(:ignore t :wk "Buffers/Bookmarks")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "IBuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b m" '(bookmark-set :wk "Set Bookmark")
    "b l" '(list-bookmarks :wk "List Bookmarks")
    "b k" '(kill-buffer :wk "Kill Buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple Buffers")
    )
  (leader-key
    "g" '(:ignore t :wk "Git")
    "g g" '(magit :wk "Start Magit")
    "g s" '(magit-status :wk "Status")
    "g d" '(magit-diff :wk "Diff")
    "g t" '(git-timemachine :wk "Timemachine")
    )
  (leader-key
    "f" '(:ignore t :wk "Files")
    "." '(find-file :wk "Find File")
    "f C" '((lambda () (interactive) (find-file "~/.emacs.d/")) :wk "Find files in config folder")
    "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Edit config file")
    )
  (leader-key
    "p" '(projectile-command-map :wk "Projectile"))

  (leader-key
    "e" '(:ignore t :wk "Evaluate")
    "e b" '(eval-buffer :wk "Evaluate buffer")
    "e d" '(eval-defun :wk "Evaluate defun or after a point")
    "e e" '(eval-expression :wk "Evaluate expression")
    "e l" '(eval-last-sexp :wk "Evaluate expression before point")
    "e r" '(eval-region :wk "Evaluate region"))

  (leader-key
    "h"  '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h m" '(describe-mode :wk "Describe mode")
    "h p" '(describe-package :wk "Describe package")
    "h k" '(describe-key :wk "Describe key")
    "h r r" '((lambda () (interactive) (load-file user-init-file)(ignore (elpaca-process-queues))) :wk "Reload emacs config"))

  (leader-key
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    )

  (leader-key
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w <left>" '(evil-window-left :wk "Window left")
    "w <down>" '(evil-window-down :wk "Window down")
    "w <up>" '(evil-window-up :wk "Window up")
    "w <right>" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))


  )
(elpaca-wait)
#+end_src
** Emacs 
:PROPERTIES:
:CUSTOM_ID: emacs
:END:
#+begin_src emacs-lisp
(use-package emacs :ensure nil
  :config
  (setq ring-bel-functuin #'ignore)  
  (setq text-mode-ispell-word-completion nil)
  (setq tab-always-indent 'complete)
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files/")))
  (setq read-process-output-max 4000)
)
(elpaca-wait)

#+end_src
* Graphical Beauty
:PROPERTIES:
:CUSTOM_ID: graphical-beauty
:END:
** Fonts
:PROPERTIES:
:CUSTOM_ID: fonts
:END:

#+begin_src emacs-lisp
  ;; Ставим стандартные фонты
  (set-face-attribute 'default nil
                      :font "JetBrainsMono Nerd Font"
                      :height 110
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "Ubuntu"
                      :height 120
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrainsMono Nerd Font"
                      :height 110
                      :weight 'medium)

  ;; Делаем так, чтобы особые символы были italic
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)
  ;; Делаем так, чтобы у нас для графики был Nerd Font
  (add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font"))


#+end_src

** Removing Bars
:PROPERTIES:
:CUSTOM_ID: removing-bars
:END:

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Line Numbers
:PROPERTIES:
:CUSTOM_ID: line-numbers
:END:

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode 1)
  (setq display-line-numbers-type 'relative) 
#+end_src

** Nerd-Icons 
:PROPERTIES:
:CUSTOM_ID: nerd-icons
:END:
#+begin_src emacs-lisp
(use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )
#+end_src
** ALL-THE-ICONS 
:PROPERTIES:
:CUSTOM_ID: all-the-icons
:END:
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
** Doom Theme 
:PROPERTIES:
:CUSTOM_ID: doom-theme
:END:
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-dracula t)
    (setq doom-themes-enable-bold t    ; Включаем bold
          doom-themes-enable-italic t); Включаем italic
    (set-frame-parameter nil 'alpha-background 90) ; Set transparency to 85%
    (add-to-list 'default-frame-alist '(alpha-background . 90)) ; Set transparency for new frames
    (doom-themes-org-config)
    (leader-key
      "h t" '(load-theme :wk "Load theme"))
    )
#+end_src
** Doom Modeline 
:PROPERTIES:
:CUSTOM_ID: doom-modeline
:END:
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
** Dashboard 
:PROPERTIES:
:CUSTOM_ID: dashboard
:END:
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    :custom

    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook))
#+end_src
** Rainbow-mode 
:PROPERTIES:
:CUSTOM_ID: rainbow-mode
:END:
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish
    :hook 
    ((org-mode prog-mode) . rainbow-mode))
#+end_src
** Rainbow Delimiters 
:PROPERTIES:
:CUSTOM_ID: rainbow-delimiters
:END:
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (prog-mode . rainbow-delimiters-mode)))
#+end_src
* Org-Mode
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:
** Toc
:PROPERTIES:
:CUSTOM_ID: toc
:END:
#+begin_src emacs-lisp
  (use-package org-make-toc
    :config
    (setq org-make-toc-insert-custom-ids t)
    (add-hook 'org-mode-hook #'org-make-toc-mode))
  (elpaca-wait)
#+end_src
** Highlight TODO 
:PROPERTIES:
:CUSTOM_ID: highlight-todo
:END:
#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
** Org-Bullets
:PROPERTIES:
:CUSTOM_ID: org-bullets
:END:

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (elpaca-wait)
#+end_src

** Org Tempo 
:PROPERTIES:
:CUSTOM_ID: org-tempo
:END:

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Org Headings Size 
:PROPERTIES:
:CUSTOM_ID: org-headings-size
:END:
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

** Org-Auto-Tangle 
:PROPERTIES:
:CUSTOM_ID: org-auto-tangle
:END:
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** Org-Roam 
:PROPERTIES:
:CUSTOM_ID: org-roam
:END:
#+begin_src emacs-lisp
(use-package org-roam
  :config
  (setq org-roam-directory "/home/berlizoves/.org/roam/")
  (setq org-roam-node-display-template "${title:*} ${tags:45}")
  (org-roam-db-autosync-enable)
  ;; (map! :leader
  ;;       (:prefix ("n r" . "org-roam")
  ;;                :desc "Completion at point"      "c" #'completion-at-point
  ;;                :desc "Find node"                "f" #'org-roam-node-find
  ;;                :desc "Show graph"               "g" #'org-roam-graph
  ;;                :desc "Insert node"              "i" #'org-roam-node-insert
  ;;                :desc "Create id for header"     "I" #'org-id-get-create
  ;;                :desc "Capture to node"          "n" #'org-roam-capture
  ;;                :desc "Toggle roam buffer"       "r" #'org-roam-buffer-toggle
  ;;                :desc "Start org-roam-ui in web" "u" #'org-roam-ui-mode
  ;;                :desc "Reload org-roam db"       "d" #'org-roam-db-sync
  ;;                :desc "Insert tag"               "t" #'org-roam-tag-add
  ;;                :desc "Remove tag"               "T" #'org-roam-tag-remove
  ;;                :desc "Add alias"                "a" #'org-roam-alias-add
  ;;                :desc "Remove alias"             "A" #'org-roam-alias-remove)
  ;;       (:prefix ("n j" . "org-roam-daily")
  ;;                :desc "Add today note entry"   "a" #'org-roam-dailies-capture-today
  ;;                :desc "Go to today note"       "A" #'org-roam-dailies-goto-today
  ;;                :desc "Add note entry by date" "d" #'org-roam-dailies-capture-date
  ;;                :desc "Go to note by date"     "D" #'org-roam-dailies-goto-date
  ;;                :desc "Find note in directory" "f" #'org-roam-dailies-find-directory
  ;;                ))
  (leader-key
    "n" '(:ignore t :wk "Org-Roam/Notes")
    "n f" '(org-roam-node-find :wk "Find Node")
    "n g" '(org-roam-graph :wk "Show Graph")
    "n i" '(org-roam-node-insert :wk "Insert Node")
    "n I" '(org-id-get-create :wk "Create id for header")
    "n n" '(org-roam-capture :wk "Capture to Node")
    "n r" '(org-roam-buffer-toggle :wk "Toggle roam buffer")
    "n u" '(org-roam-ui-mode :wk "Start org-roam-ui in web")
    "n d" '(org-roam-db-sync :wk "Reaload org-roam db")
    "n t" '(org-roam-tag-add :wk "Insert tag")
    "n T" '(org-roam-tag-remove :wk "Remove tag")
    "n a" '(org-roam-alias-add :wk "Add alias")
    "n A" '(org-roam-alias-remove :wk "Remove alias")
    ;; Dailies
    "n j" '(:ignore t :wk "Org-Roam-Dailies")
    "n j a" '(org-roam-dailies-capture-todate :wk "Add today note entry")
    "n j A" '(org-roam-dailies-goto-today :wk "Go to today note")
    "n j d" '(org-roam-dailies-capture-date :wk "Add note entry by date")
    "n j D" '(org-roam-dailies-goto-date :wk "Go to note by date")
    )

  (setq org-roam-capture-templates
        '(
          ("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
          ("b" "book notes" plain
           (file "~/.org/roam/templates/book_notes_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Book_notes:\n#+pers_rating:\n")
           :unnarrowed t)
          ("m" "library or module of pr-ing language" plain
           (file "~/.org/roam/templates/programming_module_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Library:Programming:\n")
           :unnarrowed t
           )
          ("l" "lecture" plain
           (file "~/.org/roam/templates/lecture_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Lecture:\n")
           :unnarrowed t
           )
          ("B" "programming book notes" plain
           (file "~/.org/roam/templates/programming_book_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Book_notes:Programming:\n#+pers_rating:\n")
           :unnarrowed t
           )
          ("h" "habr article" plain
           (file "~/.org/roam/templates/habr_article_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Article:Programming:Habr:\n#+pers_rating:\n")
           :unnarrowed t
           )
          )
        )
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry "* %<%I:%M %p>\n%?"
           :if-new (file+head "%<%Y-%m-%d>.org" "#+title:%<%Y-%m-%d>\n#+filetags: :Dailies:"))))
  )
(elpaca-wait)
;; (use-package websoket

;;   :after org-roam)

(use-package org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

** Org-QL-Roam
:PROPERTIES:
:CUSTOM_ID: org-ql-roam
:END:
#+begin_src emacs-lisp 
(use-package org-roam-ql
  :after (org-roam)
  )
#+end_src

** Org-Fragtog
:PROPERTIES:
:CUSTOM_ID: org-fragtog
:END:
#+begin_src emacs-lisp 
(use-package org-fragtog
:after org
:hook (org-mode . org-fragtog-mode) ; this auto-enables it when you enter an org-buffer, remove if you do not want this
:config
;; whatever you want
)
#+end_src

** OB-Async
:PROPERTIES:
:CUSTOM_ID: ob-async
:END:
#+begin_src emacs-lisp
(use-package ob-async
  :config

(setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia" "jupyter-R"))
)
#+end_src

** ORG-Babel-Load-Languages 
:PROPERTIES:
:CUSTOM_ID: org-babel-load-languages
:END:
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

#+End_src
* Git Packages 
:PROPERTIES:
:CUSTOM_ID: git-packages
:END:
** Git-Time Machine
:PROPERTIES:
:CUSTOM_ID: git-time-machine
:END:
#+begin_src emacs-lisp
(use-package git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
#+end_src
** Magit
:PROPERTIES:
:CUSTOM_ID: magit
:END:
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
* Defaults 
:PROPERTIES:
:CUSTOM_ID: defaults
:END:
#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src
* SUDO EDIT 
:PROPERTIES:
:CUSTOM_ID: sudo-edit
:END:
#+begin_src emacs-lisp
  (use-package sudo-edit
    :config
    (leader-key
      "f u" '(sudo-edit-find-file :wk "Sudo find file")
      "f U" '(sudo-edit :wk "Sudo edit file"))
    )
  (elpaca-wait)
#+end_src
* Which-key
:PROPERTIES:
:CUSTOM_ID: which-key
:END:
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :diminish
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → " )
    )
  (elpaca-wait)
#+end_src
* Dired 
:PROPERTIES:
:CUSTOM_ID: dired
:END:
** Base 
:PROPERTIES:
:CUSTOM_ID: base-0
:END:
#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash 1
        trash-directory "/home/berlizoves/.local/share/Trash/files/")

#+end_src
** Dired-open 
:PROPERTIES:
:CUSTOM_ID: dired-open
:END:
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))
#+end_src
** Peep-Dired 
:PROPERTIES:
:CUSTOM_ID: peep-dired
:END:
#+begin_src emacs-lisp

  (use-package peep-dired
    :after dired
    :hook (evil-normalize-keymaps . peep-dired-hook)
    :config
    (evil-define-key 'normal dired-mode-map
      (kbd "M-RET") 'dired-display-file
      (kbd "h") 'dired-up-directory
      (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
      (kbd "m") 'dired-mark
      (kbd "t") 'dired-toggle-marks
      (kbd "u") 'dired-unmark
      (kbd "D") 'dired-do-delete
      (kbd "J") 'dired-goto-file
      (kbd "M") 'dired-do-chmod
      (kbd "O") 'dired-do-chown
      (kbd "P") 'dired-do-print
      (kbd "R") 'dired-do-rename
      (kbd "T") 'dired-create-empty-file
      (kbd "Y") 'dired-copy
      (kbd "Z") 'dired-do-compress
      (kbd "+") 'dired-create-directory
      (kbd "-") 'dired-do-kill-lines
      (kbd "% l") 'dired-downcase
      (kbd "% m") 'dired-mark-files-regexp
      (kbd "% u") 'dired-upcase
      (kbd "* %") 'dired-mark-files-regexp
      (kbd "* .") 'dired-mark-extension
      (kbd "* /") 'dired-mark-directories
      (kbd "; d") 'epa-dired-do-decrypt
      (kbd "; e") 'epa-dired-do-encrypt)
    )
#+end_src
* Projectile 
:PROPERTIES:
:CUSTOM_ID: projectile
:END:
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (leader-key
      "p" '(:ignore t :wk "Project"))
    (projectile-mode 1))
#+end_src
* Imenu 
:PROPERTIES:
:CUSTOM_ID: imenu
:END:
** Imenu-List 
:PROPERTIES:
:CUSTOM_ID: imenu-list
:END:
#+begin_src emacs-lisp
  (use-package imenu-list
    :config

    (setq imenu-list-focus-after-activation t)                                    ; Переключение на активированный imenu-list
    (setq imenu-list-auto-resize t)
    (setq imenu-list-size 0.3)
    (setq org-imenu-depth 10)
    (leader-key
      "s RET" '(imenu-list-smart-toggle :wk "Toggle imenu-list")
      ) 
    )
#+end_src 
* IBuffer 
:PROPERTIES:
:CUSTOM_ID: ibuffer
:END:
** Nerd-Icons-IBuffer
:PROPERTIES:
:CUSTOM_ID: nerd-icons-ibuffer
:END:
#+begin_src emacs-lisp
(use-package nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src
* Completion 
:PROPERTIES:
:CUSTOM_ID: completion
:END:
** Flycheck 
:PROPERTIES:
:CUSTOM_ID: flycheck
:END:
#+begin_src emacs-lisp
  (use-package flycheck
    :diminish
    :ensure t
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src
** LSP
:PROPERTIES:
:CUSTOM_ID: lsp
:END:
** Corfu
:PROPERTIES:
:CUSTOM_ID: corfu
:END:
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    (corfu-scroll-margin 5)        ;; Use scroll margin
    ;; (corfu-auto-delay 0.8)
    ;; Enable Corfu only for certain modes.
    :hook ((prog-mode . corfu-mode))
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes
    :bind
    (:map corfu-map
          ("TAB" . corfu-next)
          ([tab] . corfu-next)
          ("S-TAB" . corfu-previous)
          ([backtab] . corfu-previous)
          ("C-SPC" . corfu-insert-separator))
    :init
    (global-corfu-mode)

    :config
    (defun corfu-enable-in-minibuffer ()
      "Enable Corfu in the minibuffer."
      (when (local-variable-p 'completion-at-point-functions)
        ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
        (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                    corfu-popupinfo-delay nil)
        (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
    )
  (elpaca-wait)
#+end_src
*** Nerd-Icons
:PROPERTIES:
:CUSTOM_ID: nerd-icons-0
:END:
#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
    )

#+end_src
** Dabbrev 
:PROPERTIES:
:CUSTOM_ID: dabbrev
:END:
#+begin_src emacs-lisp
  (use-package dabbrev
    :ensure nil
    :demand nil
    ;; Swap M-/ and C-M-/
    ;; :bind (("M-/" . dabbrev-completion)
    ;;        ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
  (elpaca-wait)
#+end_src
** Cape 
:PROPERTIES:
:CUSTOM_ID: cape
:END:
#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
  (elpaca-wait)
#+end_src
** Orderless 
:PROPERTIES:
:CUSTOM_ID: orderless
:END:
#+begin_src emacs-lisp

  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** Vertico 
:PROPERTIES:
:CUSTOM_ID: vertico
:END:
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :ensure nil
    :demand nil
    :init
    (savehist-mode))

#+end_src
** Marginalia 
:PROPERTIES:
:CUSTOM_ID: marginalia
:END:
#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src
** Consult 
:PROPERTIES:
:CUSTOM_ID: consult
:END:
#+begin_src emacs-lisp
  (use-package consult
    :config
    (recentf-mode)
    (leader-key
      "f r" '(consult-recent-file :wk "Find recent file")))
  (elpaca-wait)
#+end_src
* Shell
:PROPERTIES:
:CUSTOM_ID: shell
:END:
** VTerm
:PROPERTIES:
:CUSTOM_ID: vterm
:END:
#+begin_src emacs-lisp
  (use-package vterm
    :config
    (setq shell-file-name "/bin/zsh"
          vterm-max-scrollback 5000))
  (leader-key
    "o t" '(vterm-other-window :wk "Opens Vterm in other window")
    "o T" '(vterm :wk "Open VTerm instead of this buffer")
    )
  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;;(display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;;(direction . bottom)
                   ;;(dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.3))))
#+end_src
* Direnv
:PROPERTIES:
:CUSTOM_ID: direnv
:END:
#+begin_src emacs-lisp
(use-package direnv
 :config
 (direnv-mode))
#+end_src
* Programming Language 
:PROPERTIES:
:CUSTOM_ID: programming-language
:END:
** LSP-Mode 
:PROPERTIES:
:CUSTOM_ID: lsp-mode
:END:
#+begin_src emacs-lisp

(add-to-list 'load-path (expand-file-name "lib/lsp-mode" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "lib/lsp-mode/clients" user-emacs-directory))
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (python-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration)
	 ;; (emacs-lisp-mode . lsp)
	 (lisp-interaction-mode . lsp)
	 )
  :commands lsp
  )
(use-package lsp-ui 
  :after lsp-mode
  :init
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)

  )
#+end_src
** DAP-Mode 
:PROPERTIES:
:CUSTOM_ID: dap-mode
:END:
#+begin_src emacs-lisp
(use-package dap-mode
  :after lsp-mode
  :config
  ;; (require dap-python)

  (setq dap-python-debugger 'debugpy)
  )
#+end_src
** Python 
:PROPERTIES:
:CUSTOM_ID: python
:END:
#+begin_src emacs-lisp
;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '((emacs-lisp . t)
;;    (python . t)
;;    (jupyter . t)))

(setq python-indent-offset 4)
(setq org-startup-indented t)
(use-package blacken
  :after python
  :ensure t
  :hook (python-mode . blacken-mode))

(use-package py-isort
  :after python
  :ensure t
  ;; :hook (python-mode . py-isort-enable-on-save)
  )

(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
			 (require 'lsp-pyright)
			 (lsp))))

#+end_src

#+RESULTS:
** Jupyter 
:PROPERTIES:
:CUSTOM_ID: jupyter
:END:
#+begin_src emacs-lisp
(use-package jupyter
  ;; :commands (jupyter-run-repl
  ;;            jupyter-run-server-repl
  ;;            jupyter-server-list-kernels
  ;;            )
  :init
  :config
  (setq jupyter-eval-use-overlays t)
  (defun display-ansi-colors ()
    "Fixes kernel output in emacs-jupyter"
    (ansi-color-apply-on-region (point-min) (point-max)))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'org-babel-after-execute-hook #'display-ansi-colors)))

  (after! ob-jupyter
    (org-babel-jupyter-aliases-from-kernelspecs))

  (defun lc/org-load-jupyter ()
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((jupyter . t)))))

  (defun lc/load-ob-jupyter ()
    ;; only try to load in org-mode
    (when (derived-mode-p 'org-mode)
      ;; skip if already loaded
      (unless (member '(jupyter . t) org-babel-load-languages)
        ;; only load if jupyter is available
        (when (executable-find "jupyter")
          (lc/org-load-jupyter)))))

  (after! jupyter
    (unless (member '(jupyter . t) org-babel-load-languages)
      (when (executable-find "jupyter")
        (lc/org-load-jupyter))))
  (after! org-src
    (add-to-list 'org-src-lang-modes '("jupyter-python" . python-ts))
    (add-to-list 'org-src-lang-modes '("jupyter-R" . R)))
  (setq org-babel-default-header-args:jupyter-python '(
                                                       (:display . "plain")
                                                       (:results . "replace both")
                                                       (:session . "jpy")
                                                       (:async . "yes")
                                                       (:pandoc . "t")
                                                       (:exports . "both")
                                                       (:cache . "no")
                                                       (:noweb . "no")
                                                       (:hlines . "no")
                                                       (:tangle . "no")
                                                       (:eval . "never-export")
                                                       (:kernel . "python3")
                                                       ))
  (add-to-list 'org-babel-tangle-lang-exts '("ipython" . "py"))
  (add-to-list 'org-babel-tangle-lang-exts '("jupyter-python" . "py"))
  (add-hook 'jupyter-org-interaction-mode-hook (lambda ()  (corfu-mode)))
  (org-babel-jupyter-override-src-block "python")
  (org-babel-jupyter-override-src-block "R")
  )
#+end_src



#+begin_src jupyter-python
import os
import numpy 
import pandas
#+end_src

#+RESULTS:
