#+TITLE:XenHunt Config
#+AUTHOR: Evgeny Berlizov (XenHunt)
#+DESCRIPTION: XenHunt personal config for Emacs
#+STARTUP: content

* Содержание 
:PROPERTIES:
:TOC:      :include all :depth 100 :force (nothing) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#base][Base]]
  - [[#fast-loading][Fast Loading]]
  - [[#scripts][Scripts]]
  - [[#load-scripts][Load Scripts]]
  - [[#defaults][Defaults]]
  - [[#wgrep][Wgrep]]
  - [[#smartparens][Smartparens]]
  - [[#general-keybindigs][General Keybindigs]]
  - [[#expand-region][Expand-region]]
  - [[#aggresive-indent][Aggresive Indent]]
  - [[#evil-mode][Evil-Mode]]
    - [[#collection][Collection]]
    - [[#smartparens-0][Smartparens]]
    - [[#surround][Surround]]
    - [[#evil-embrace][Evil-Embrace]]
    - [[#diff][Diff]]
    - [[#nerd-commenter][Nerd-Commenter]]
    - [[#visulstar][Visulstar]]
    - [[#evil-mc][Evil-MC]]
    - [[#раскладка][Раскладка]]
  - [[#diminish][Diminish]]
  - [[#exec-path-from-shell][Exec-path-from-shell]]
  - [[#editor-config][Editor-Config]]
  - [[#emacs][Emacs]]
  - [[#bufler][Bufler]]
- [[#graphical-beauty][Graphical Beauty]]
  - [[#doom-theme][Doom Theme]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#fonts][Fonts]]
  - [[#removing-bars][Removing Bars]]
  - [[#line-numbers][Line Numbers]]
  - [[#nerd-icons][Nerd-Icons]]
  - [[#all-the-icons][ALL-THE-ICONS]]
  - [[#dashboard][Dashboard]]
  - [[#rainbow-mode][Rainbow-mode]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#rainbow-identifiers][Rainbow Identifiers]]
  - [[#prismel][Prism.el]]
  - [[#ligatures][Ligatures]]
  - [[#highlight-indent][Highlight indent]]
- [[#beacon][Beacon]]
- [[#drag-stuff][Drag-stuff]]
- [[#org-mode][Org-Mode]]
  - [[#hover-links][Hover Links]]
  - [[#org-appear][Org-Appear]]
  - [[#toc][Toc]]
  - [[#highlight-todo][Highlight TODO]]
  - [[#org-bullets][Org-Bullets]]
  - [[#org-tempo][Org Tempo]]
  - [[#org-headings-size][Org Headings Size]]
  - [[#org-auto-tangle][Org-Auto-Tangle]]
  - [[#org-roam][Org-Roam]]
  - [[#org-ql-roam][Org-QL-Roam]]
  - [[#org-fragtog][Org-Fragtog]]
  - [[#ob-async][OB-Async]]
  - [[#org-babel-load-languages][ORG-Babel-Load-Languages]]
  - [[#org-download][Org-Download]]
  - [[#org-ref][Org-Ref]]
  - [[#раскладка-0][Раскладка]]
- [[#git-packages][Git Packages]]
  - [[#git-time-machine][Git-Time Machine]]
  - [[#magit][Magit]]
  - [[#magit-todos][Magit-TODOS]]
- [[#sudo-edit][SUDO EDIT]]
- [[#which-key][Which-key]]
- [[#dired][Dired]]
  - [[#base-0][Base]]
  - [[#dired-open][Dired-open]]
  - [[#peep-dired][Peep-Dired]]
- [[#projectile][Projectile]]
- [[#pdf-tools][PDF-Tools]]
- [[#nov-mode][Nov-mode]]
- [[#elfeed][Elfeed]]
- [[#imenu][Imenu]]
  - [[#imenu-list][Imenu-List]]
- [[#ibuffer][IBuffer]]
  - [[#nerd-icons-ibuffer][Nerd-Icons-IBuffer]]
- [[#completion][Completion]]
  - [[#flycheck][Flycheck]]
  - [[#corfu][Corfu]]
    - [[#nerd-icons-0][Nerd-Icons]]
  - [[#dabbrev][Dabbrev]]
  - [[#cape][Cape]]
  - [[#orderless][Orderless]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#embark][Embark]]
  - [[#consult][Consult]]
  - [[#yasnippet][Yasnippet]]
- [[#jinx][Jinx]]
- [[#dash-docs][Dash-Docs]]
- [[#shell][Shell]]
  - [[#vterm][VTerm]]
- [[#direnv][Direnv]]
- [[#programming-language][Programming Language]]
  - [[#lsp-mode][LSP-Mode]]
  - [[#dap-mode][DAP-Mode]]
  - [[#formater][Formater]]
  - [[#python][Python]]
    - [[#blacken][Blacken]]
    - [[#py-isort][Py-Isort]]
    - [[#lsp-pyright][LSP-Pyright]]
    - [[#pip-env][Pip-env]]
    - [[#раскладка-1][Раскладка]]
  - [[#jupyter][Jupyter]]
  - [[#web][WEB]]
    - [[#add-node-modules-path][add-node-modules-path]]
    - [[#web-mode][WEB-Mode]]
    - [[#npm-mode][NPM-Mode]]
    - [[#prettier-js][Prettier-JS]]
    - [[#js2-mode][JS2-Mode]]
    - [[#typescript][Typescript]]
      - [[#раскладка-2][Раскладка]]
    - [[#skewer][Skewer]]
    - [[#tide][Tide]]
    - [[#multi-web-mode][Multi-Web-Mode]]
    - [[#json][JSON]]
    - [[#yaml][Yaml]]
    - [[#treesitter][Treesitter]]
      - [[#treesitter-auto][Treesitter-auto]]
      - [[#treesitter-0][Treesitter]]
- [[#codeium][Codeium]]
- [[#polymode][Polymode]]
:END:

* Base
:PROPERTIES:
:CUSTOM_ID: base
:END:

** Fast Loading 
:PROPERTIES:
:CUSTOM_ID: fast-loading
:END:
#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src
** Scripts
:PROPERTIES:
:CUSTOM_ID: scripts
:END:
#+begin_src emacs-lisp

(add-to-list 'load-path "~/.emacs.d/scripts/")
#+end_src

** Load Scripts 
:PROPERTIES:
:CUSTOM_ID: load-scripts
:END:
#+begin_src emacs-lisp
(require 'elpaca-setup)
(require 'buffer-move)
(require 'macros)
#+end_src

#+RESULTS:
: macros

** Defaults 
:PROPERTIES:
:CUSTOM_ID: defaults
:END:
#+begin_src emacs-lisp
(setq native-comp-async-report-warnings-errors nil)
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
;; (electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(setq recentf-max-menu-items 100)
(setq recentf-max-saved-items 150)
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(setq confirm-kill-emacs 'y-or-n-p)
(add-hook 'org-mode-hook (lambda ()
			   (setq-local electric-pair-inhibit-predicate
				       `(lambda (c)
					  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
;; (defun my-scroll-precision-mode ()

;;   (unless (memq major-mode '(pdf-view-mode)) ; замените mode1 и mode2 на режимы, в которых не нужно включать display-line-numbers-mode
;;     (pixel-scroll-precision-mode)))

;; (add-hook 'prog-mode-hook 'my-scroll-precision-mode)
;; (add-hook 'text-mode-hook 'my-scroll-precision-mode)
(global-hl-line-mode 1)
(setq echo-keystrokes 0.01)
(setq pixel-scroll-precision-mode 1)
(setq user-cache-dir (concat user-emacs-directory ".local/cache/"))
#+end_src

** Wgrep
:PROPERTIES:
:CUSTOM_ID: wgrep
:END:
#+begin_src emacs-lisp
(use-package wgrep)
#+end_src
** Smartparens 
:PROPERTIES:
:CUSTOM_ID: smartparens
:END:
#+begin_src emacs-lisp
;; (use-package smartparens-config)
(use-package smartparens-mode
  :ensure smartparens  ;; install the package
  :hook (prog-mode text-mode markdown-mode) ;; add `smartparens-mode` to these hooks
  :config
  ;; load default config
  (require 'smartparens-config))

#+end_src
** General Keybindigs
:PROPERTIES:
:CUSTOM_ID: general-keybindigs
:END:

#+begin_src emacs-lisp
(use-package general :ensure t :demand t
  :config
  (general-evil-setup)
  (general-create-definer leader-key
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")


  (leader-key
    "b" '(:ignore t :wk "Buffers/Bookmarks")
    "b b" '(consult-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "IBuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b m" '(bookmark-set :wk "Set Bookmark")
    "b l" '(list-bookmarks :wk "List Bookmarks")
    "b k" '(kill-buffer :wk "Kill Buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple Buffers")
    )

  (leader-key
    "g" '(:ignore t :wk "Git")
    "g g" '(magit :wk "Start Magit")
    "g s" '(magit-status :wk "Status")
    "g d" '(magit-diff :wk "Diff")
    "g t" '(git-timemachine :wk "Timemachine")
    )

  (leader-key
    "i" '(:ingore t :wk "Insert")
    "i e" '(emoji-insert :wk "Insert")
    "i c" '(insert-char :wk "Character")
    "i t" '(table-insert :wk "Table")
    "i y" '(consult-yasnippet :wk "Snippet")

    )
  (leader-key
    "s" '(:ignore t :wk "Search")
    "s b" '(consult-buffer :wk "Buffer")
    "s i" '(consult-imenu :wk "Imenu")
    ;; "s "
    )
  (leader-key
    "f" '(:ignore t :wk "Files")
    "." '(find-file :wk "Find File")
    "f C" '((lambda () (interactive) (find-file "~/.emacs.d/")) :wk "Find files in config folder")
    "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Edit config file")
    "f r" '(consult-recent-file :wk "Find recent file")
    )

  (general-define-key
   :states 'normal
   :keymaps 'prog-mode-map
   :prefix "SPC"
    "c" '(:ignore t :wk "Code")
    "c c" '(compile :wk "Compile code")
    "c r" '(lsp-rename :wk "Rename object")
    "c d" '(lsp-find-definition :wk "Find definition")
    "c x" '(consult-flymake :wk "List errors")
    "c r" '(lsp-restart :wk "Restart LSP")
   )

  (general-define-key
   :keymaps 'projectile-command-map
   ;; :prefix "SPC p" ; Префикс для доступа к ключам projectile-command-map
   "f" 'consult-projectile-find-file
   "p" 'consult-projectile-switch-project
   "d" 'consult-projectile-find-dir
   "b" 'consult-projectile-switch-to-buffer
   ;; "s" 'projectile-switch-project
   ;; "g" 'projectile-ag
   ;; Добавьте другие свои привязки клавиш здесь
   )

  (leader-key
    "p" '(projectile-command-map :wk "Projectile"))

  ;; (leader-key
  ;;   "e" '(:ignore t :wk "Evaluate")
  ;;   "e b" '(eval-buffer :wk "Evaluate buffer")
  ;;   "e d" '(eval-defun :wk "Evaluate defun or after a point")
  ;;   "e e" '(eval-expression :wk "Evaluate expression")
  ;;   "e l" '(eval-last-sexp :wk "Evaluate expression before point")
  ;;   "e r" '(eval-region :wk "Evaluate region"))

  (leader-key
    "h"  '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h m" '(describe-mode :wk "Describe mode")
    "h p" '(describe-package :wk "Describe package")
    "h k" '(describe-key :wk "Describe key")
    "h K" '(describe-keymap :wk "Describe keymap")
    "h r r" '((lambda () (interactive) (load-file user-init-file)(ignore (elpaca-process-queues))) :wk "Reload emacs config"))

  (leader-key
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    )

  (leader-key
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w <left>" '(evil-window-left :wk "Window left")
    "w <down>" '(evil-window-down :wk "Window down")
    "w <up>" '(evil-window-up :wk "Window up")
    "w <right>" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))

  (leader-key
    "C-c" '(:ignore t :wk "Codeium")
    "C-c t" '(my/toggle-codeium :wk "Toggle Codeium")
    "C-c c" '(my/strict-complete-codeium :wk "Call Codeium Completion")
    )

  )
(elpaca-wait)
#+end_src
** Expand-region
:PROPERTIES:
:CUSTOM_ID: expand-region
:END:
#+begin_src emacs-lisp
(use-package expand-region
  :ensure (:depth nil)
  :config
  (leader-key
    "=" '(er/expand-region :wk "Expand region")
    "-" '(er/contract-region :wk "Contract region")
    )
  )
(elpaca-wait)
#+end_src
** Aggresive Indent
:PROPERTIES:
:CUSTOM_ID: aggresive-indent
:END:
#+begin_src emacs-lisp
(use-package aggressive-indent
  :config
  (setq global-aggressive-indent-mode 1)
  )
  #+end_src
** Evil-Mode
:PROPERTIES:
:CUSTOM_ID: evil-mode
:END:
#+begin_src emacs-lisp
(use-package evil
   :init
   (setq evil-want-integration t)
   (setq evil-want-keybinding nil)
   (setq evil-vsplit-window-right t)
   (setq evil-split-window-below t)
   
   (setq evil-want-C-i-jump nil)
   (setq evil-want-c-i-jump nil)

   :config
   (evil-define-key 'normal 'global (kbd "g c") 'comment-line)
   (evil-define-key 'visual 'global (kbd "g c") 'comment-dwim)
   (evil-define-key 'normal org-mode-map (kbd "RET") 'org-babel-execute-src-block)
   (evil-define-key 'normal org-mode-map (kbd "C-M-<down>") 'org-promote-subtree)
   (evil-set-leader nil (kbd "SPC"))
   (evil-define-key 'normal org-mode-map (kbd "C-M-<up>") 'org-demote-subtree)
   (evil-set-undo-system 'undo-redo)
   (evil-mode)
   )
 (use-package evil-tutor :ensure t :demand t)
 (elpaca-wait)

 ;; Setting RETURN key in org-mode to follow links
 (setq org-return-follows-link  t)

#+end_src
*** Collection
:PROPERTIES:
:CUSTOM_ID: collection
:END:
#+begin_src emacs-lisp
 (use-package evil-collection :ensure t :demand t
   :after evil
   :config
   (setq evil-collection-mode-list '(
 				    dashboard
 				    dired
 				    dired-sidebar
 				    ibuffer
 				    minibuffer
 				    sh-script
 				    compile
 				    bookmark
 				    magit
 				    magit-todos
 				    forge
 				    git-timemachine
 				    vterm
 				    bufler
 				    indent
 				    corfu
 				    consult
 				    vertico
				    embark
				    which-key
				    dashboard
				    (pdf pdf-view)
				    elpaca
				    imenu
				    imenu-list
				    org
				    org-roam
				    python
				    elisp-mode
				    typescript-mode
				    evil-mc
				    yaml-mode
				    flycheck
				    flymake
				    elfeed
				    js2-mode
				    ;; rjsx-modre
				    xref
 				    ))
   (evil-collection-init)
   )
(elpaca-wait)


(after! 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil)
  (define-key evil-motion-state-map (kbd "C-o") nil)
  )

  #+end_src

#+RESULTS:

*** Smartparens
:PROPERTIES:
:CUSTOM_ID: smartparens-0
:END:
#+begin_src emacs-lisp
(use-package evil-smartparens
  :after smartparens-mode
  :config
  (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)
  )
#+end_src
*** Surround
:PROPERTIES:
:CUSTOM_ID: surround
:END:
#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :commands (global-evil-surround-mode
             evil-surround-edit
             evil-Surround-edit
             evil-surround-region)
  :config (global-evil-surround-mode 1))

#+end_src
*** Evil-Embrace
:PROPERTIES:
:CUSTOM_ID: evil-embrace
:END:
#+begin_src emacs-lisp

(use-package embrace

  :ensure (:depth nil)
  )
(elpaca-wait)


(use-package evil-embrace
  :commands embrace-add-pair embrace-add-pair-regexp
  :hook (LaTeX-mode . embrace-LaTeX-mode-hook)
  :hook (org-mode . embrace-org-mode-hook)
  :hook (ruby-mode . embrace-ruby-mode-hook)
  :hook (emacs-lisp-mode . embrace-emacs-lisp-mode-hook)
  ;; :hook ((c++-mode c++-ts-mode rustic-mode csharp-mode java-mode swift-mode typescript-mode)
  ;;        . +evil-embrace-angle-bracket-modes-hook-h)
  ;; :hook (scala-mode . +evil-embrace-scala-mode-hook-h)
  :init
  (after! evil-surround
    (evil-embrace-enable-evil-surround-integration))
  )
(elpaca-wait)
#+end_src
*** Diff
:PROPERTIES:
:CUSTOM_ID: diff
:END:
#+begin_src emacs-lisp
;; (use-package evil-quick-diff
;;   :commands (evil-quick-diff evil-quick-diff-cancel))
#+end_src
*** Nerd-Commenter
:PROPERTIES:
:CUSTOM_ID: nerd-commenter
:END:
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :commands (evilnc-comment-operator
             evilnc-inner-comment
             evilnc-outer-commenter)
  ;; :general ([remap comment-line] #'evilnc-comment-or-uncomment-lines)
)
#+end_src
*** Visulstar
:PROPERTIES:
:CUSTOM_ID: visulstar
:END:
#+begin_src emacs-lisp
(use-package evil-visualstar
  :commands (evil-visualstar/begin-search
             evil-visualstar/begin-search-forward
             evil-visualstar/begin-search-backward)
  :init
  (evil-define-key* 'visual 'global
    "*" #'evil-visualstar/begin-search-forward
    "#" #'evil-visualstar/begin-search-backward))
#+end_src
*** Evil-MC
:PROPERTIES:
:CUSTOM_ID: evil-mc
:END:
#+begin_src emacs-lisp
(use-package evil-mc
  :after evil
  :config
  (evil-mc-mode  1) ;; enable
  )
#+end_src
*** TODO Раскладка
:PROPERTIES:
:CUSTOM_ID: раскладка
:END:
#+begin_src emacs-lisp

#+end_src
** Diminish 
:PROPERTIES:
:CUSTOM_ID: diminish
:END:
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
** Exec-path-from-shell 
:PROPERTIES:
:CUSTOM_ID: exec-path-from-shell
:END:
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+end_src
** Editor-Config 
:PROPERTIES:
:CUSTOM_ID: editor-config
:END:
#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src
** Emacs 
:PROPERTIES:
:CUSTOM_ID: emacs
:END:
#+begin_src emacs-lisp
(use-package emacs :ensure nil
  :config
  (setq gc-cons-threshold 100000000)
  (setq ring-bel-functuin #'ignore)  
  (setq text-mode-ispell-word-completion nil)
  (setq tab-always-indent 'complete)
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files/")))
  (setq read-process-output-max (* 1024 1024 10))
  )
(elpaca-wait)

#+end_src
** Bufler 
:PROPERTIES:
:CUSTOM_ID: bufler
:END:
#+begin_src emacs-lisp
(use-package bufler
  :ensure (bufler :fetcher github :repo "alphapapa/bufler.el"
                  :files (:defaults (:exclude "helm-bufler.el")))
  :config
  (bufler-mode)
  ;; (bufler-tabs-mode)
  (setq bufler-face-prefix "prism-level-")
  (leader-key
    "TAB" '(:ignore t :wk "Tab")
    "TAB s" '(bufler-switch-buffer :wk "Switch buffer in tabs")
    "TAB w" '(bufler-workspace-frame-set :wk "Set frame")
    )
  )
#+end_src
* Graphical Beauty
:PROPERTIES:
:CUSTOM_ID: graphical-beauty
:END:
** Doom Theme 
:PROPERTIES:
:CUSTOM_ID: doom-theme
:END:
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-dracula t)
  (setq doom-themes-enable-bold t    ; Включаем bold
        doom-themes-enable-italic t); Включаем italic
  (set-frame-parameter nil 'alpha-background 90) ; Set transparency to 85%
  (add-to-list 'default-frame-alist '(alpha-background . 90)) ; Set transparency for new frames
  (doom-themes-org-config)
  (leader-key
    "h t" '(load-theme :wk "Load theme"))
  )
#+end_src
** Doom Modeline 
:PROPERTIES:
:CUSTOM_ID: doom-modeline
:END:
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
** Fonts
:PROPERTIES:
:CUSTOM_ID: fonts
:END:

#+begin_src emacs-lisp
;; Создаём функцию, потому-что org-make-toc перезаписывает стили фонтов
(defun my/set-fonts ()
  "Ставим стандартные фонты"
  (set-face-attribute 'default nil
		      :font "JetBrainsMono Nerd Font"
		      :height 110
		      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
		      :font "Ubuntu"
		      :height 120
		      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
		      :font "JetBrainsMono Nerd Font"
		      :height 110
		      :weight 'medium)

  ;; Делаем так, чтобы особые символы были italic
  (set-face-attribute 'font-lock-comment-face nil
		      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
		      :weight 'ultra-bold
		      ;; :slant 'italic
		      )
  ;; Делаем так, чтобы у нас для графики был Nerd Font
  (add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font"))
  (setq org-hide-emphasis-markers t)
  )

#+end_src

** Removing Bars
:PROPERTIES:
:CUSTOM_ID: removing-bars
:END:

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Line Numbers
:PROPERTIES:
:CUSTOM_ID: line-numbers
:END:

#+begin_src emacs-lisp
(defun my-enable-line-numbers ()
  (unless (memq major-mode '(pdf-view-mode)) ; замените mode1 и mode2 на режимы, в которых не нужно включать display-line-numbers-mode
    (display-line-numbers-mode)))
(add-hook 'prog-mode-hook 'my-enable-line-numbers)
(add-hook 'text-mode-hook 'my-enable-line-numbers)

;; (global-display-line-numbers-mode 1)
(global-visual-line-mode 1)
(setq display-line-numbers-type 'relative) 
#+end_src

** Nerd-Icons 
:PROPERTIES:
:CUSTOM_ID: nerd-icons
:END:
#+begin_src emacs-lisp
(use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )
#+end_src
** ALL-THE-ICONS 
:PROPERTIES:
:CUSTOM_ID: all-the-icons
:END:
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))
(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
** Dashboard 
:PROPERTIES:
:CUSTOM_ID: dashboard
:END:
#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-display-icons-p t)
  :custom

  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)

  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (dashboard-setup-startup-hook)
  )
#+end_src
** Rainbow-mode 
:PROPERTIES:
:CUSTOM_ID: rainbow-mode
:END:
#+begin_src emacs-lisp
(use-package rainbow-mode
  ;; :diminish
  ;; :hook 
  ;; ((org-mode prog-mode) . rainbow-mode)
  )
#+end_src
** Rainbow Delimiters 
:PROPERTIES:
:CUSTOM_ID: rainbow-delimiters
:END:
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  ;; :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
  ;;        (prog-mode . rainbow-delimiters-mode))
  )
#+end_src
** Rainbow Identifiers 
:PROPERTIES:
:CUSTOM_ID: rainbow-identifiers
:END:
#+begin_src emacs-lisp
(use-package rainbow-identifiers
  :config
  ;; (add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
  )
#+end_src
** Prism.el 
:PROPERTIES:
:CUSTOM_ID: prismel
:END:
#+begin_src emacs-lisp
(use-package prism
  ;; :elpaca (prism :fetcher github :repo "alphapapa/prism.el")
  :hook (
	 (python-mode . prism-whitespace-mode)
	 ((javascript-mode css-mode typescript-mode json-mode yaml-mode html-mode markdown-mode  latex-mode bash-mode) . prism-mode)
	 )
  :init
  ;;(message (member 'prism-mode #'emacs-lisp-mode-hook))
  (defun my/set-elisp-prism()
  (interactive)
  ;; (message  (string(memq 'prism-mode emacs-lisp-mode-hook)))
    (unless (member 'prism-mode emacs-lisp-mode-hook)
      (add-hook 'emacs-lisp-mode-hook #'prism-mode)
      )
    )
  (add-hook 'server-after-make-frame-hook 'my/set-elisp-prism)
  ;;(my/set-elisp-prism)
  )
#+end_src
** Ligatures 
:PROPERTIES:
:CUSTOM_ID: ligatures
:END:
#+begin_src emacs-lisp
;; (use-package ligature)
#+end_src
** Highlight indent
:PROPERTIES:
:CUSTOM_ID: highlight-indent
:END:
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  )
#+end_src
* Beacon
:PROPERTIES:
:CUSTOM_ID: beacon
:END:
#+begin_src emacs-lisp
(use-package beacon
  :custom
  (beacon-blink-duration 2)
  :config
  (beacon-mode 1)
  )
#+end_src
* Drag-stuff
:PROPERTIES:
:CUSTOM_ID: drag-stuff
:END:
#+begin_src emacs-lisp
(use-package drag-stuff
  :init
  (drag-stuff-global-mode 1)
  :config
  (drag-stuff-define-keys)

  (evil-define-key 'visual 'global (kbd "M-k") 'drag-stuff-up)
  (evil-define-key 'visual 'global (kbd "M-j") 'drag-stuff-down)
  (evil-define-key 'visual 'global (kbd "M-h") 'drag-stuff-left)
  (evil-define-key 'visual 'global (kbd "M-l") 'drag-stuff-right)
  )
#+end_src

#+RESULTS:

* Org-Mode
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:
** Hover Links 
:PROPERTIES:
:CUSTOM_ID: hover-links
:END:
#+begin_src emacs-lisp
(setq org-mouse-1-follows-link t)
(setq org-descriptive-links t)
#+end_src
** Org-Appear 
:PROPERTIES:
:CUSTOM_ID: org-appear
:END:
#+begin_src emacs-lisp
(use-package org-appear
  :custom
  (org-appear-autoemphasis t)
  (org-appear-autolinks t)
  (org-appear-autosubmarkers t)
  (org-appear-autoentities t)
  (org-appear-autokeywords t)
  :config
  (add-hook 'org-mode-hook 'org-appear-mode)
  (setq org-appear-trigger 'manual)
  (add-hook 'org-mode-hook (lambda ()
                             (add-hook 'evil-insert-state-entry-hook
                                       #'org-appear-manual-start
                                       nil
                                       t)
                             (add-hook 'evil-insert-state-exit-hook
                                       #'org-appear-manual-stop
                                       nil
                                       t)))
  )
#+end_src
** Toc
:PROPERTIES:
:CUSTOM_ID: toc
:END:
#+begin_src emacs-lisp
(use-package org-make-toc
  :config
  (setq org-make-toc-insert-custom-ids t)
  (add-hook 'org-mode-hook #'org-make-toc-mode)
  (my/set-fonts)
  )
(elpaca-wait)
#+end_src
** Highlight TODO 
:PROPERTIES:
:CUSTOM_ID: highlight-todo
:END:
#+begin_src emacs-lisp
(use-package hl-todo
  :ensure (:depth nil)
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
** Org-Bullets
:PROPERTIES:
:CUSTOM_ID: org-bullets
:END:

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
(elpaca-wait)
#+end_src

** Org Tempo 
:PROPERTIES:
:CUSTOM_ID: org-tempo
:END:

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Org Headings Size 
:PROPERTIES:
:CUSTOM_ID: org-headings-size
:END:
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

** Org-Auto-Tangle 
:PROPERTIES:
:CUSTOM_ID: org-auto-tangle
:END:
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** Org-Roam 
:PROPERTIES:
:CUSTOM_ID: org-roam
:END:
#+begin_src emacs-lisp
(use-package org-roam
  :config
  (setq org-roam-directory "/home/berlizoves/.org/roam/")
  (setq org-roam-node-display-template "${title:*} ${tags:45}")
  (org-roam-db-autosync-enable)
  ;; (map! :leader
  ;;       (:prefix ("n r" . "org-roam")
  ;;                :desc "Completion at point"      "c" #'completion-at-point
  ;;                :desc "Find node"                "f" #'org-roam-node-find
  ;;                :desc "Show graph"               "g" #'org-roam-graph
  ;;                :desc "Insert node"              "i" #'org-roam-node-insert
  ;;                :desc "Create id for header"     "I" #'org-id-get-create
  ;;                :desc "Capture to node"          "n" #'org-roam-capture
  ;;                :desc "Toggle roam buffer"       "r" #'org-roam-buffer-toggle
  ;;                :desc "Start org-roam-ui in web" "u" #'org-roam-ui-mode
  ;;                :desc "Reload org-roam db"       "d" #'org-roam-db-sync
  ;;                :desc "Insert tag"               "t" #'org-roam-tag-add
  ;;                :desc "Remove tag"               "T" #'org-roam-tag-remove
  ;;                :desc "Add alias"                "a" #'org-roam-alias-add
  ;;                :desc "Remove alias"             "A" #'org-roam-alias-remove)
  ;;       (:prefix ("n j" . "org-roam-daily")
  ;;                :desc "Add today note entry"   "a" #'org-roam-dailies-capture-today
  ;;                :desc "Go to today note"       "A" #'org-roam-dailies-goto-today
  ;;                :desc "Add note entry by date" "d" #'org-roam-dailies-capture-date
  ;;                :desc "Go to note by date"     "D" #'org-roam-dailies-goto-date
  ;;                :desc "Find note in directory" "f" #'org-roam-dailies-find-directory
  ;;                ))
  (leader-key
    "n" '(:ignore t :wk "Org-Roam/Notes")
    ;; "n f" '(org-roam-node-find :wk "Find Node")
    "n g" '(org-roam-graph :wk "Show Graph")
    "n i" '(org-roam-node-insert :wk "Insert Node")
    "n I" '(org-id-get-create :wk "Create id for header")
    "n n" '(org-roam-capture :wk "Capture to Node")
    "n r" '(org-roam-buffer-toggle :wk "Toggle roam buffer")
    "n u" '(org-roam-ui-mode :wk "Start org-roam-ui in web")
    "n d" '(org-roam-db-sync :wk "Reaload org-roam db")
    "n t" '(org-roam-tag-add :wk "Insert tag")
    "n T" '(org-roam-tag-remove :wk "Remove tag")
    "n a" '(org-roam-alias-add :wk "Add alias")
    "n A" '(org-roam-alias-remove :wk "Remove alias")
    ;; Dailies
    "n j" '(:ignore t :wk "Org-Roam-Dailies")
    "n j a" '(org-roam-dailies-capture-todate :wk "Add today note entry")
    "n j A" '(org-roam-dailies-goto-today :wk "Go to today note")
    "n j d" '(org-roam-dailies-capture-date :wk "Add note entry by date")
    "n j D" '(org-roam-dailies-goto-date :wk "Go to note by date")
    )

  (setq org-roam-capture-templates
        '(
          ("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
          ("b" "book notes" plain
           (file "~/.org/roam/templates/book_notes_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Book_notes:\n#+pers_rating:\n")
           :unnarrowed t)
          ("m" "library or module of pr-ing language" plain
           (file "~/.org/roam/templates/programming_module_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Library:Programming:\n")
           :unnarrowed t
           )
          ("l" "lecture" plain
           (file "~/.org/roam/templates/lecture_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Lecture:\n")
           :unnarrowed t
           )
          ("B" "programming book notes" plain
           (file "~/.org/roam/templates/programming_book_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Book_notes:Programming:\n#+pers_rating:\n")
           :unnarrowed t
           )
          ("h" "habr article" plain
           (file "~/.org/roam/templates/habr_article_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Article:Programming:Habr:\n#+pers_rating:\n")
           :unnarrowed t
           )
          )
        )
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry "* %<%I:%M %p>\n%?"
           :if-new (file+head "%<%Y-%m-%d>.org" "#+title:%<%Y-%m-%d>\n#+filetags: :Dailies:"))))
  )
(elpaca-wait)
;; (use-package websoket

;;   :after org-roam)

(use-package org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

** Org-QL-Roam
:PROPERTIES:
:CUSTOM_ID: org-ql-roam
:END:
#+begin_src emacs-lisp 
(use-package org-roam-ql
  :after (org-roam)
  )
#+end_src

** Org-Fragtog
:PROPERTIES:
:CUSTOM_ID: org-fragtog
:END:
#+begin_src emacs-lisp 
(use-package org-fragtog
:after org
:hook (org-mode . org-fragtog-mode) ; this auto-enables it when you enter an org-buffer, remove if you do not want this
:config
;; whatever you want
)
#+end_src

** OB-Async
:PROPERTIES:
:CUSTOM_ID: ob-async
:END:
#+begin_src emacs-lisp
(use-package ob-async
  :config

(setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia" "jupyter-R"))
)
#+end_src

** ORG-Babel-Load-Languages 
:PROPERTIES:
:CUSTOM_ID: org-babel-load-languages
:END:
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

#+End_src

** Org-Download 
:PROPERTIES:
:CUSTOM_ID: org-download
:END:
#+begin_src emacs-lisp
(use-package org-download
  :config
  (add-hook 'dired-mode-hook 'org-download-enable)
  (setq org-download-image-dir "./.images")
  )
  #+end_src

** Org-Ref
:PROPERTIES:
:CUSTOM_ID: org-ref
:END:
#+begin_src emacs-lisp
(use-package org-ref)

#+end_src
** TODO Раскладка
:PROPERTIES:
:CUSTOM_ID: раскладка-0
:END:
[[https://github.com/doomemacs/doomemacs/blob/master/modules/lang/org/config.el][Doom-Config Org-Mode]]
#+begin_src emacs-lisp
(general-define-key
 ;; :definer 'minor-mode
 :states 'normal
 :keymaps 'org-mode-map
 :prefix "SPC"
 "m" '(:ignore :wk "Org-Mode Commands")
 "m #" '(org-update-statistics-cookies :wk "org-update-statistics-cookies")
 "m '" '(org-edit-special :wk "org-edit-special")
 "m *" '(org-ctrl-c-star :wk "org-ctrl-c-star")
 "m +" '(org-ctrl-c-minus :wk "org-ctrl-c-minus")
 "m ," '(org-switchb :wk "org-switchb")
 "m ." '(org-goto :wk "org-goto")
 "m @" '(org-cite-insert :wk "org-cite-insert")
 "m ." '(consult-org-heading :wk "consult-org-heading")
 "m /" '(consult-org-agenda :wk "consult-org-agenda")
 )
#+end_src
* Git Packages 
:PROPERTIES:
:CUSTOM_ID: git-packages
:END:
** Git-Time Machine
:PROPERTIES:
:CUSTOM_ID: git-time-machine
:END:
#+begin_src emacs-lisp
;; (us;; e-package git-timemachine
;; ;;   :hook (evil-normalize-keymaps . git-timemachine-hook)
;; ;;   :config
;; ;;     (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
;; ;;     (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
;; ;; )
#+end_src
** Magit
:PROPERTIES:
:CUSTOM_ID: magit
:END:
#+begin_src emacs-lisp
(use-package transient)
(elpaca-wait)
(use-package magit)
#+end_src
** Magit-TODOS
:PROPERTIES:
:CUSTOM_ID: magit-todos
:END:
#+begin_src emacs-lisp
(use-package magit-todos
  :after magit
  :config (magit-todos-mode 1))
(use-package forge
  :after magit
  )
#+end_src
* SUDO EDIT 
:PROPERTIES:
:CUSTOM_ID: sudo-edit
:END:
#+begin_src emacs-lisp
(use-package sudo-edit
  :config
  (leader-key
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file"))
  )
(elpaca-wait)
#+end_src
* Which-key
:PROPERTIES:
:CUSTOM_ID: which-key
:END:
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " )
  )
(elpaca-wait)
#+end_src
* Dired 
:PROPERTIES:
:CUSTOM_ID: dired
:END:
** Base 
:PROPERTIES:
:CUSTOM_ID: base-0
:END:
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :config

  (setq delete-by-moving-to-trash 1
	trash-directory "/home/berlizoves/.local/share/Trash/files/")
  (setq insert-directory-program "ls" 
	dired-use-ls-dired t
	dired-listing-switches "-agho --group-directories-first" 
	)
  (setq  dired-use-ls-dired nil)
  (setq  image-dired-dir (concat user-cache-dir "image-dired/")
	 image-dired-db-file (concat image-dired-dir "db.el")
	 image-dired-gallery-dir (concat image-dired-dir "gallery/")
	 image-dired-temp-image-file (concat image-dired-dir "temp-image")
	 image-dired-temp-rotate-image-file (concat image-dired-dir "temp-rotate-image")
	 ;; Screens are larger nowadays, we can afford slightly larger thumbnails
	 image-dired-thumb-size 150)
  )
#+end_src
** Dired-open 
:PROPERTIES:
:CUSTOM_ID: dired-open
:END:
#+begin_src emacs-lisp
(use-package dired-open
  :after dired
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))
#+end_src
** Peep-Dired 
:PROPERTIES:
:CUSTOM_ID: peep-dired
:END:
#+begin_src emacs-lisp

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :init
  (evil-define-key 'normal dired-mode-map
    (kbd "M-RET") 'dired-display-file
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
    (kbd "m") 'dired-mark
    (kbd "t") 'dired-toggle-marks
    (kbd "u") 'dired-unmark
    (kbd "D") 'dired-do-delete
    (kbd "J") 'dired-goto-file
    (kbd "M") 'dired-do-chmod
    (kbd "O") 'dired-do-chown
    (kbd "P") 'dired-do-print
    (kbd "R") 'dired-do-rename
    (kbd "T") 'dired-create-empty-file
    (kbd "Y") 'dired-copy
    (kbd "Z") 'dired-do-compress
    (kbd "+") 'dired-create-directory
    (kbd "-") 'dired-do-kill-lines
    (kbd "% l") 'dired-downcase
    (kbd "% m") 'dired-mark-files-regexp
    (kbd "% u") 'dired-upcase
    (kbd "* %") 'dired-mark-files-regexp
    (kbd "* .") 'dired-mark-extension
    (kbd "* /") 'dired-mark-directories
    (kbd "; d") 'epa-dired-do-decrypt
    (kbd "; e") 'epa-dired-do-encrypt)
  )
#+end_src
* Projectile 
:PROPERTIES:
:CUSTOM_ID: projectile
:END:
#+begin_src emacs-lisp
(use-package projectile
  :config
  (leader-key
    "p" '(:ignore t :wk "Project"))
  ;; (pushnew! projectile-project-root-files "package.json")
  ;; (pushnew! projectile-globally-ignored-directories "^node_modules$" "^flow-typed$")
  (projectile-mode 1))
#+end_src
* PDF-Tools
:PROPERTIES:
:CUSTOM_ID: pdf-tools
:END:
#+begin_src emacs-lisp
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install)  ; Standard activation command
  (pdf-loader-install) ; On demand loading, leads to faster startup time
  )
#+end_src
* Nov-mode
:PROPERTIES:
:CUSTOM_ID: nov-mode
:END:
#+begin_src emacs-lisp
(use-package nov
  :ensure t
  :mode ("\\.epub\\'" . nov-mode) 
  )
;; (use-package nov-xwidget
;;   :ensure (:host github :repo "chenyanming/nov-xwidget"
;; 		 :files (:defaults "*.el"))
;;   :demand t
;;   :after nov
;;   :config
;;   (define-key nov-mode-map (kbd "o") 'nov-xwidget-view)
;;   (add-hook 'nov-mode-hook 'nov-xwidget-inject-all-files))
#+end_src
* Elfeed
:PROPERTIES:
:CUSTOM_ID: elfeed
:END:
#+begin_src emacs-lisp

(defvar my/elfeed-original-search-pattern "@2-week-ago +habr" "Original search pattern for my elfeed")

(defvar my/elfeed-original-search-pattern "@2-week-ago +habr" "Original search pattern for my elfeed")

(defvar my/elfeed-original-search-pattern "@2-week-ago +habr" "Original search pattern for my elfeed")

(use-package elfeed
  :commands elfeed
  :init
  (setq elfeed-db-directory (concat user-emacs-directory "elfeed/db/")
        elfeed-enclosure-default-dir (concat user-emacs-directory "elfeed/enclosures/"))
  :config

  (add-hook 'elfeed-search-mode-hook #'elfeed-update)
  (make-directory elfeed-db-directory t)

  (setq elfeed-search-filter "#100 +habr +article"
        elfeed-show-entry-switch #'pop-to-buffer
        ;; elfeed-show-entry-delete #'+rss/delete-pane
        shr-max-image-proportion 0.8)

  (setq elfeed-search-feed-face ":foreground #ffffff :weight bold")
  ;; elfeed-feeds 
  ;; '(
  ;;   ("https://www.reddit.com/r/linux.rss" eng reddit linux)
  ;;   ;; ("https://www.reddit.com/r/commandline.rss" reddit commandline)
  ;;   ;; ("https://www.reddit.com/r/distrotube.rss" reddit distrotube)
  ;;   ("https://www.reddit.com/r/emacs.rss" eng reddit emacs)

  ;;   ("https://www.reddit.com/r/org-mode.rss" eng reddit emacs org-mode)
  ;;   ;; ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
  ;;   ;; ("https://hackaday.com/blog/feed/" hackaday linux)
  ;;   ;; ("https://opensource.com/feed" opensource linux)
  ;;   ;; ("https://linux.softpedia.com/backend.xml" softpedia linux)
  ;;   ;; ("https://itsfoss.com/feed/" itsfoss linux)
  ;;   ;; ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
  ;;   ;; ("https://www.phoronix.com/rss.php" phoronix linux)
  ;;   ;; ("http://feeds.feedburner.com/d0od" omgubuntu linux)
  ;;   ;; ("https://www.computerworld.com/index.rss" computerworld linux)
  ;;   ;; ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
  ;;   ;; ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
  ;;   ;; ("https://betanews.com/feed" betanews linux)
  ;;   ;; ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
  ;;   ;; ("https://distrowatch.com/news/dwd.xml" distrowatch linux)
  ;;   ;; ("habrahabr.ru/rss/hubs/webdev/articles/all" habr web-development)
  ;;   ;; ("habrahabr.ru/rss/hubs/all" habr test)
  ;;   ;; ("habrahabr.ru/rss/hubs/open_source/articles/rated25" habr opensource)
  ;;   ("https://habr.com/ru/rss/hubs/python/articles/rated25/?fl=ru" rus habr python)
  ;;   ("https://habr.com/ru/rss/hubs/open_source/articles/rated25/?fl=ru" rus habr open_source)
  ;;   ("https://habr.com/ru/rss/hubs/machine_learning/articles/rated25/?fl=ru" rus habr machine_learning)
  ;;   ("https://habr.com/ru/rss/hubs/artificial_intelligence/articles/rated25/?fl=ru" rus habr ai)
  ;;   ("https://habr.com/ru/rss/hubs/linux/articles/rated25/?fl=ru" rus habr linux)
  ;;   ("https://habr.com/ru/rss/hubs/algorithms/articles/rated25/?fl=ru" rus habr algorithms)
  ;;   ("https://habr.com/ru/rss/hubs/linux_dev/articles/rated25/?fl=ru" rus habr linux)
  ;;   ("https://habr.com/ru/rss/hubs/webdev/articles/rated25/?fl=ru" rus habr web_development)
  ;;   ("https://habr.com/ru/rss/hubs/reactjs/articles/rated25/?fl=ru" rus habr web_development react)
  ;;   ("https://habr.com/ru/rss/hubs/angular/articles/rated25/?fl=ru" rus habr web_development angular)
  ;;   ("https://habr.com/ru/rss/hubs/vuejs/articles/rated25/?fl=ru" rus habr web_development vuejs)
  ;;   ("https://habr.com/ru/rss/hubs/javascript/articles/rated25/?fl=ru" rus habr web_development javascript)
  ;;   ("https://habr.com/ru/rss/hubs/typescript/articles/rated25/?fl=ru" rus habr web_development typescript)
  ;;   ))
  (leader-key
    "e" '(:ignore t :wk "Elfeed")
    "e e" '(elfeed :wk "Start")
    "e u" '(elfeed-update :wk "Update")
    )
  )


(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))
(use-package elfeed-org
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
  )
#+end_src

#+RESULTS:

* Imenu 
:PROPERTIES:
:CUSTOM_ID: imenu
:END:
** Imenu-List 
:PROPERTIES:
:CUSTOM_ID: imenu-list
:END:
#+begin_src emacs-lisp
(use-package imenu-list
  :custom
  (imenu-list-focus-after-activation t)
  (imenu-list-auto-resize t)
  (imenu-list-size 0.3)
  (org-imenu-depth 10)
  (imenu-list-focus-after-activation t)                                    ; Переключение на активированный imenu-list
  :config

  (leader-key
    "s RET" '(imenu-list-smart-toggle :wk "Toggle imenu-list")
    ) 
  )
#+end_src 
* IBuffer 
:PROPERTIES:
:CUSTOM_ID: ibuffer
:END:
** Nerd-Icons-IBuffer
:PROPERTIES:
:CUSTOM_ID: nerd-icons-ibuffer
:END:
#+begin_src emacs-lisp
(use-package nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src
* Completion 
:PROPERTIES:
:CUSTOM_ID: completion
:END:
** Flycheck 
:PROPERTIES:
:CUSTOM_ID: flycheck
:END:
#+begin_src emacs-lisp
(use-package flycheck
  :diminish
  :ensure t
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src
** Corfu
:PROPERTIES:
:CUSTOM_ID: corfu
:END:
#+begin_src emacs-lisp
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  (corfu-scroll-margin 5)        ;; Use scroll margin
  ;; (corfu-auto-delay 0.8)
  ;; Enable Corfu only for certain modes.

  :hook ((prog-mode . corfu-mode))
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous)
        ("C-SPC" . corfu-insert-separator))
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode)
  (setq corfu-popupinfo-delay (cons 0.7 0.7))

  :config
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer."
    (when (local-variable-p 'completion-at-point-functions)
      ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
  (corfu-history-mode)
  (add-to-list 'savehist-additional-variables 'corfu-history)
  )
(elpaca-wait)
#+end_src
*** Nerd-Icons
:PROPERTIES:
:CUSTOM_ID: nerd-icons-0
:END:
#+begin_src emacs-lisp
(use-package nerd-icons-corfu
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
  )

#+end_src
** Dabbrev 
:PROPERTIES:
:CUSTOM_ID: dabbrev
:END:
#+begin_src emacs-lisp
(use-package dabbrev
  :ensure nil
  :demand nil
  ;; Swap M-/ and C-M-/
  ;; :bind (("M-/" . dabbrev-completion)
  ;;        ("C-M-/" . dabbrev-expand))
  :config
  (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
  ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
  (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
(elpaca-wait)
#+end_src
** Cape 
:PROPERTIES:
:CUSTOM_ID: cape
:END:
#+begin_src emacs-lisp
(use-package cape
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  ;; (advice-add #'lsp-completion-at-point :around #'cape-wrap-debug)
  (after! lsp-mode
    (advice-add #'lsp-completion-at-point :around #'cape-wrap-noninterruptible)
    (advice-add #'lsp-completion-at-point :around #'cape-wrap-nonexclusive)
    )
  (advice-add #'comint-completion-at-point :around #'cape-wrap-nonexclusive)
  (advice-add #'eglot-completion-at-point :around #'cape-wrap-nonexclusive)
  (advice-add #'pcomplete-completions-at-point :around #'cape-wrap-nonexclusive)
  )
(elpaca-wait)
#+end_src
** Orderless 
:PROPERTIES:
:CUSTOM_ID: orderless
:END:
#+begin_src emacs-lisp

(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** Vertico 
:PROPERTIES:
:CUSTOM_ID: vertico
:END:
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)
  ;; Sort directories before files
  (defun sort-directories-first (files)
    (setq files (vertico-sort-history-length-alpha files))
    (nconc (seq-filter (lambda (x) (string-suffix-p "/" x)) files)
           (seq-remove (lambda (x) (string-suffix-p "/" x)) files)))

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  :config
  (setq vertico-sort-function #'sort-directories-first)
  ;; (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
  )
(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package vertico-multiform
  :after vertico
  :ensure nil
  :config
  (vertico-multiform-mode)
  )
(use-package savehist
  :ensure nil
  :demand nil
  :init
  (savehist-mode))

#+end_src
** Marginalia 
:PROPERTIES:
:CUSTOM_ID: marginalia
:END:
#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src
** Embark
:PROPERTIES:
:CUSTOM_ID: embark
:END:
#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-;" . embark-act)
   ("M-." . embark-dwim)
   ("C-h B" . embark-bindings))

  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; (leader-key
  ;;   "T" '(embark-act :wk "Embark"))
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
  )

(use-package embark-consult
  ;; :after '(em
  :hook
  (embark-collect-mode . consult-preview-at-point-mode)
  )
#+end_src

#+RESULTS:

** Consult 
:PROPERTIES:
:CUSTOM_ID: consult
:END:
#+begin_src emacs-lisp
(use-package consult
  :config
  (recentf-mode)
  )
(elpaca-wait)

(use-package consult-dir)

(use-package consult-org-roam
  :ensure t
  :after org-roam
  :init
  (require 'consult-org-roam)
  ;; Activate the minor mode
  (consult-org-roam-mode 1)
  :custom
  ;; Use `ripgrep' for searching with `consult-org-roam-search'
  (consult-org-roam-grep-func #'consult-ripgrep)
  ;; Configure a custom narrow key for `consult-buffer'
  (consult-org-roam-buffer-narrow-key ?r)
  ;; Display org-roam buffers right after non-org-roam buffers
  ;; in consult-buffer (and not down at the bottom)
  (consult-org-roam-buffer-after-buffers t)
  :config
  ;; Eventually suppress previewing for certain functions
  (consult-customize
   consult-org-roam-forward-links
   :preview-key "M-.")

  (leader-key
    "n f" '(consult-org-roam-file-find :wk "Find Node")
    "n s" '(consult-org-roam-search :wk "Search inside Nodes")
    "n b" '(consult-org-roam-backlinks :wk "Search back links")
    "n B" '(consult-org-roam-backlinks-recursive :wk "Search back links (recursively)")
    "n f" '(consult-org-roam-forward-links :wk "Search forward links")
    )
  ;; :bind
  ;; ;; Define some convenient keybindings as an addition
  ;; ("C-c n e" . consult-org-roam-file-find)
  ;; ("C-c n b" . consult-org-roam-backlinks)
  ;; ("C-c n B" . consult-org-roam-backlinks-recursive)
  ;; ("C-c n l" . consult-org-roam-forward-links)
  ;; ("C-c n r" . consult-org-roam-search)
  )

(use-package consult-projectile)

(use-package consult-yasnippet)

#+end_src

** Yasnippet 
:PROPERTIES:
:CUSTOM_ID: yasnippet
:END:
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1)
  )
(use-package yasnippet-snippets)
#+end_src
* Jinx
:PROPERTIES:
:CUSTOM_ID: jinx
:END:
#+begin_src emacs-lisp
(use-package jinx
  :hook ((text-mode ) . jinx-mode )
  :config
  (after! vetico-multiform
    (add-to-list 'vertico-multiform-categories
		 '(jinx grid (vertico-grid-annotate . 20)))
    (vertico-multiform-mode 1)
    )
  )
#+end_src
* Dash-Docs
:PROPERTIES:
:CUSTOM_ID: dash-docs
:END:
#+begin_src emacs-lisp
;; (use-package dash-docs)
;; (use-package consult-dash
;;   :bind (("M-s d" . consult-dash))
;;   :config
;;   ;; Use the symbol at point as initial search term
;;   (consult-customize consult-dash :initial (thing-at-point 'symbol)))
#+end_src
* Shell
:PROPERTIES:
:CUSTOM_ID: shell
:END:
** VTerm
:PROPERTIES:
:CUSTOM_ID: vterm
:END:
#+begin_src emacs-lisp
(use-package vterm
  :custom
  (vterm-always-compile-module t)
  :config
  (setq shell-file-name "/bin/zsh"
        vterm-max-scrollback 5000))
(leader-key
  "o t" '(vterm-other-window :wk "Opens Vterm in other window")
  "o T" '(vterm :wk "Open VTerm instead of this buffer")
  )
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 ;;(dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3))))
#+end_src
* Direnv
:PROPERTIES:
:CUSTOM_ID: direnv
:END:
#+begin_src emacs-lisp
(use-package direnv
 :config
 (direnv-mode))
#+end_src
* Programming Language 
:PROPERTIES:
:CUSTOM_ID: programming-language
:END:
** LSP-Mode 
:PROPERTIES:
:CUSTOM_ID: lsp-mode
:END:
#+begin_src emacs-lisp

(add-to-list 'load-path (expand-file-name "lib/lsp-mode" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "lib/lsp-mode/clients" user-emacs-directory))
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :custom

  (lsp-log-io nil) ; ensure this is off when not debugging
  (lsp-completion-provider :none)
  (lsp-completion--enable t)
  (lsp-restart 'auto-restart)

  (lsp-diagnostics-provider :flymake)
  :init

  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
       (let ((bytecode (read (current-buffer))))
	 (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))
  (advice-add (if (progn (require 'json)
			 (fboundp 'json-parse-buffer))
                  'json-parse-buffer
		'json-read)
              :around
              #'lsp-booster--advice-json-parse)

  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (cons "emacs-lsp-booster" orig-result))
	orig-result)))
  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)

  (defun my/orderless-dispatch-flex-first (_pattern index _total)
    (and (eq index 0) 'orderless-flex))
  (defun fv--lsp-mode-capf-setup ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))
  (add-hook 'orderless-style-dispatchers #'my/orderless-dispatch-flex-first nil 'local)
  (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point)))
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (

	 (lsp-completion-mode . fv--lsp-mode-capf-setup)
	 ;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	 (python-mode . lsp)
	 (json-mode . lsp)
	 (yaml-mode . lsp)
	 (javascript-mode . lsp)
	 ;; (web-mode . lsp)
	 ;; (typescript-mode . lsp)
	 (css-mode . lsp)
	 (lsp-completion-mode . lsp-enable-which-key-integration)
	 ;; (emacs-lisp-mode . lsp)
	 (lisp-interaction-mode . lsp)
	 )
  ;; :commands lsp
  :config
  ;; (add-hook 'lsp-mode-hook #'lsp-completion-mode)
  (setq lsp-enabled-clients '(ts-ls pyright angular-ls vue-semantic-server json-ls html-ls eslint css-ls bash-ls))
  )
(use-package lsp-ui 
  :custom
  (lsp-ui-sideline-show-diagnostics t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-position 'at-point)
  :after lsp-mode
  :init
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)

  )
#+end_src
** DAP-Mode 
:PROPERTIES:
:CUSTOM_ID: dap-mode
:END:
#+begin_src emacs-lisp
(defvar +debugger--dap-alist
  `(((:lang cc +lsp)         :after ccls        :require (dap-lldb dap-gdb-lldb))
    ((:lang elixir +lsp)     :after elixir-mode :require dap-elixir)
    ((:lang go +lsp)         :after go-mode     :require dap-dlv-go)
    ((:lang java +lsp)       :after java-mode   :require lsp-java)
    ((:lang php +lsp)        :after php-mode    :require dap-php)
    ((:lang python +lsp)     :after python      :require dap-python)
    ((:lang ruby +lsp)       :after ruby-mode   :require dap-ruby)
    ((:lang rust +lsp)       :after rustic-mode :require (dap-lldb dap-cpptools))
    ((:lang javascript +lsp)
     :after (js2-mode typescript-mode)
     :require (dap-node dap-chrome dap-firefox ,@(if (featurep :system 'windows) '(dap-edge)))))
  "TODO")

(use-package dap-mode
  :after lsp-mode
  :hook ((dap-mode . dap-tooltip-mode)
	 (dap-mode . dap-ui-mode)
	 (dap-ui-mode . dap-ui-controls-mode)
	 )
  :init
  (setq dap-breakpoints-file (concat user-emacs-directory "dap-breakpoints")
        dap-utils-extension-path (concat user-emacs-directory "dap-extension/"))
  :config
  (require 'dap-python)

  (setq dap-python-debugger 'debugpy)
  (setq lsp-clients-angular-language-server-command
	'("node"
	  "/home/berlizoves/.nvm/versions/node/v20.10.0/lib/node_modules/@angular/language-server"
	  "--ngProbeLocations"
	  "/home/berlizoves/.nvm/versions/node/v20.10.0/lib/node_modules/"
	  "--tsProbeLocations"
	  "/home/berlizoves/.nvm/versions/node/v20.10.0/lib/node_modules/"
	  "--stdio"))
  (general-define-key
   ;; :definer 'minor-mode
   :states 'normal
   :keymaps 'prog-mode-map
   :prefix "SPC"

   "d" '(:ignore t :wk "Debug")
   "d d" '(dap-debug :wk "Start debug session")
   "d b" '(dap-breakpoint-toggle :wk "Toggle breakpoint")
   "d D" '(dap-breakpoint-delete-all :wk "Delete all breakpoints")
   "d c" '(dap-continue :wk "Continue")
   "d n" '(dap-next :wk "Step Over")
   "d i" '(dap-step-in :wk "Step Into")
   "d o" '(dap-step-out :wk "Step Out")
   "d s" '(dap-delete-session :wk "Stop")
   )
  ;; (leader-key
  ;;   "d" '(:ignore t :wk "Debug")
  ;;   "d d" '(dap-debug :wk "Start debug session")
  ;;   "d b" '(dap-breakpoint-toggle :wk "Toggle breakpoint")
  ;;   "d D" '(dap-breakpoint-delete-all :wk "Delete all breakpoints")
  ;;   "d c" '(dap-continue :wk "Continue")
  ;;   "d n" '(dap-next :wk "Step Over")
  ;;   "d i" '(dap-step-in :wk "Step Into")
  ;;   "d o" '(dap-step-out :wk "Step Out")
  ;;   "d s" '(dap-delete-session :wk "Stop")
  ;;   )
  )
;; (use-package dap-ui
;;   :hook (dap-mode . dap-ui-mode)
;;   :hook (dap-ui-mode . dap-ui-controls-mode))
#+end_src
** Formater 
:PROPERTIES:
:CUSTOM_ID: formater
:END:
#+begin_src emacs-lisp
;; (use-package apheleia
;;   :ensure t
;;   :config
;;   (apheleia-global-mode +1))

#+end_src
** Python 
:PROPERTIES:
:CUSTOM_ID: python
:END:
#+begin_src emacs-lisp
(setq python-indent-offset 4)
(setq org-startup-indented t)
(setq python-indent-guess-indent-offset nil)
(after! tree-sitter
  (add-hook 'python-mode-local-vars-hook #'tree-sitter! 'append)
  )

#+end_src

#+RESULTS:
*** Blacken 
:PROPERTIES:
:CUSTOM_ID: blacken
:END:
#+begin_src emacs-lisp
(use-package blacken
  :after python
  :ensure t
  :hook (python-mode . blacken-mode))
#+end_src
*** Py-Isort
:PROPERTIES:
:CUSTOM_ID: py-isort
:END:
#+begin_src emacs-lisp
(use-package py-isort
  :after python
  :ensure t
  ;; :hook (python-mode . py-isort-enable-on-save)
  )
#+end_src
*** LSP-Pyright
:PROPERTIES:
:CUSTOM_ID: lsp-pyright
:END:
#+begin_src emacs-lisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
			 (require 'lsp-pyright)
			 (lsp))))
#+end_src
*** Pip-env
:PROPERTIES:
:CUSTOM_ID: pip-env
:END:
#+begin_src emacs-lisp
(use-package pipenv
  :hook (python-mode . pipenv-mode)
  :init
  (setq
   pipenv-projectile-after-switch-function
   #'pipenv-projectile-after-switch-extended))
#+end_src
*** Раскладка
:PROPERTIES:
:CUSTOM_ID: раскладка-1
:END:
#+begin_src emacs-lisp
(general-define-key
 ;; :definer 'minor-mode
 :states 'normal
 :keymaps 'python-mode-map
 :prefix "SPC"
 "m" '(:ignore t :wk "Python commands")
 "m i" '(:ignore t :wk "Imports")
 "m i f" '(python-fix-imports :wk "Fix Imports")
 "m i s" '(py-isort-buffer :wk "Sort Imports")
 "m s" '(:ignore t :wk "Shell")
 "m s s" '(python-shell-restart :wk "Start/Restart")
 "m s b" '(python-shell-send-buffer :wk "Send buffer")
 "m s r" '(python-shell-send-region :wk "Send region")
 "m l" '(pipenv-lock :wk "Lock pipfile")
 "m g" '(pipenv-graph :wk "Show graph")
 "m u" '(pipenv-update :wk "Update all libraries")
 "m U" '(pipenv-uninstall :wk "Uninstall packages")
 "m i" '(pipenv-install :wk "Install packages")
 "m a" '(pipenv-activate :wk "Activate venv")
 "m d" '(pipenv-deactivate :wk "Deactivate venv")
 )

#+end_src

#+RESULTS:

** Jupyter 
:PROPERTIES:
:CUSTOM_ID: jupyter
:END:
#+begin_src emacs-lisp
(use-package jupyter
  ;; :commands (jupyter-run-repl
  ;;            jupyter-run-server-repl
  ;;            jupyter-server-list-kernels
  ;;            )
  :init
  :config
  (setq jupyter-eval-use-overlays t)
  (defun display-ansi-colors ()
    "Fixes kernel output in emacs-jupyter"
    (ansi-color-apply-on-region (point-min) (point-max)))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'org-babel-after-execute-hook #'display-ansi-colors)))

  (after! ob-jupyter
    (org-babel-jupyter-aliases-from-kernelspecs))

  (defun lc/org-load-jupyter ()
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((jupyter . t)))))

  (defun lc/load-ob-jupyter ()
    ;; only try to load in org-mode
    (when (derived-mode-p 'org-mode)
      ;; skip if already loaded
      (unless (member '(jupyter . t) org-babel-load-languages)
        ;; only load if jupyter is available
        (when (executable-find "jupyter")
          (lc/org-load-jupyter)))))

  (after! jupyter
    (unless (member '(jupyter . t) org-babel-load-languages)
      (when (executable-find "jupyter")
        (lc/org-load-jupyter))))
  (after! org-src
    ;; (add-to-list 'org-src-lang-modes '("jupyter-python" . python-ts))
    (add-to-list 'org-src-lang-modes '("jupyter-R" . R)))
  (setq org-babel-default-header-args:jupyter-python '(
                                                       (:display . "plain")
                                                       (:results . "replace both")
                                                       (:session . "jpy")
                                                       (:async . "yes")
                                                       (:pandoc . "t")
                                                       (:exports . "both")
                                                       (:cache . "no")
                                                       (:noweb . "no")
                                                       (:hlines . "no")
                                                       (:tangle . "no")
                                                       (:eval . "never-export")
                                                       (:kernel . "python3")
                                                       ))
  (add-to-list 'org-babel-tangle-lang-exts '("ipython" . "py"))
  (add-to-list 'org-babel-tangle-lang-exts '("jupyter-python" . "py"))
  (add-hook 'jupyter-org-interaction-mode-hook (lambda ()  (corfu-mode)))
  ;; (org-babel-jupyter-override-src-block "python")
  ;; (org-babel-jupyter-override-src-block "R")
  )
#+end_src

** WEB
:PROPERTIES:
:CUSTOM_ID: web
:END:
*** add-node-modules-path
:PROPERTIES:
:CUSTOM_ID: add-node-modules-path
:END:
#+begin_src emacs-lisp
(use-package add-node-modules-path
  :ensure t)
#+end_src
*** WEB-Mode
:PROPERTIES:
:CUSTOM_ID: web-mode
:END:
#+begin_src emacs-lisp
(use-package web-mode
  :mode (
	 ("\\.html\\'" . web-mode)
         ("\\.css\\'" . web-mode)
         ("\\.js\\'" . web-mode)
	 ;; ("\\.vue\\'" . web-mode) 
	 ;; ("\\.ts\\'" . web-mode)
	 )
  :config
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode) 'append)
  :mode "\\.vue\\'"
  :hook ((web-mode . lsp-mode))
  :config
  (setq web-mode-markup-indent-offset 2) ; Отступ для HTML и XML
  (setq web-mode-css-indent-offset 2)    ; Отступ для CSS
  (setq web-mode-code-indent-offset 2)   ; Отступ для JavaScript
  (setq web-mode-enable-auto-pairing t)   ; Автоподстановка скобок
  (setq web-mode-enable-css-colorization t) ; Подсветка цветов в CSS
  (setq web-mode-enable-current-element-highlight t) ; Выделение текущего элемента
  (setf (alist-get "javascript" web-mode-comment-formats nil nil #'equal)
	"//")
  )

;; 1. Remove web-mode auto pairs whose end pair starts with a latter
;;    (truncated autopairs like <?p and hp ?>). Smartparens handles these
;;    better.
;; 2. Strips out extra closing pairs to prevent redundant characters
;;    inserted by smartparens.
;; Use // instead of /* as the default comment delimited in JS



;;
;; (add-hook '(html-mode-local-vars-hook
;;             web-mode-local-vars-hook
;;             nxml-mode-local-vars-hook)
;;           :append #'lsp!)

#+end_src
*** NPM-Mode 
:PROPERTIES:
:CUSTOM_ID: npm-mode
:END:
#+begin_src emacs-lisp
(use-package npm-mode
  :ensure t
  :config
  (npm-global-mode))
#+end_src
*** Prettier-JS 
:PROPERTIES:
:CUSTOM_ID: prettier-js
:END:
#+begin_src emacs-lisp
(use-package prettier-js
  :config
  (add-hook 'web-mode-hook #'add-node-modules-path)
  (defun enable-minor-mode (my-pair)
    (if (buffer-file-name)
	(if (string-match (car my-pair) buffer-file-name)
	    (funcall (cdr my-pair)))
      )
    )
  (add-hook 'web-mode-hook #'(lambda ()
			       (enable-minor-mode
				'("\\.jsx?\\'" . prettier-js-mode))
			       (enable-minor-mode
				'("\\.tsx?\\'" . prettier-js-mode))
			       ))
  )
#+end_src
*** JS2-Mode 
:PROPERTIES:
:CUSTOM_ID: js2-mode
:END:
#+begin_src emacs-lisp
(use-package js2-mode
  :mode (
         ("\\.js\\'" . js2-mode))
  :hook ((js2-mode . lsp-mode))
  :config
  (setq js-indent-level 2)
  )

(use-package js2-refactor
:hook ((js2-mode . js2-refactor))
)
#+end_src
*** Typescript 
:PROPERTIES:
:CUSTOM_ID: typescript
:END:
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode ("\.ts$")
  :hook (typescript-mode . lsp)
  :config
  ;; we choose this instead of tsx-mode so that eglot can automatically figure out language for server
  ;; see https://github.com/joaotavora/eglot/issues/624 and https://github.com/joaotavora/eglot#handling-quirky-servers

  (setq typescript-indent-level 2)
  (define-derived-mode typescriptreact-mode typescript-mode
    "TypeScript TSX")

  ;; use our derived mode for tsx files
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
  ;; by default, typescript-mode is mapped to the treesitter typescript parser
  ;; use our derived mode to map both .tsx AND .ts -> typescriptreact-mode -> treesitter tsx
  (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx))
  )

#+end_src
**** Раскладка 
:PROPERTIES:
:CUSTOM_ID: раскладка-2
:END:
*** Skewer 
:PROPERTIES:
:CUSTOM_ID: skewer
:END:
#+begin_src emacs-lisp
(use-package skewer-mode
  :hook (((js2-mode css-mode html-mode) . skewer-mode))
)
  
#+end_src
*** Tide 
:PROPERTIES:
:CUSTOM_ID: tide
:END:
#+begin_src emacs-lisp
;; (defun setup-tide-mode ()
;;   (interactive)
;;   (tide-setup)
;;   (flycheck-mode +1)
;;   (setq flycheck-check-syntax-automatically '(save mode-enabled))
;;   (eldoc-mode +1)
;;   (tide-hl-identifier-mode +1)
;;   (setq tide-completion-ignore-case t)
;;   (eldoc-mode +1)
;;   (tide-hl-identifier-mode +1)
;;   (message "setup-tide-mode"))

;; (use-package tide
;;   :ensure t
;;   :after 
;;   (rjsx-mode flycheck)
;;   (typescript-mode  flycheck)
;;   (web-mode  flycheck)
;;   :hook  (
;; 	  (typescript-mode . setup-tide-mode)
;; 	  (js-mode . setup-tide-mode)
;; 	  (rjsx-mode . setup-tide-mode)
;; 	  (typescript-mode . tide-setup)
;;           (typescript-mode . tide-hl-identifier-mode)
;; 	  (js2-mode . tide-setup)
;;           (before-save . tide-format-before-save))
;;   :config
;;   (after! web-mode
;;     (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
;;     (add-hook 'web-mode-hook
;;               (lambda ()
;; 		(when (string-equal "jsx" (file-name-extension buffer-file-name))
;; 		  (setup-tide-mode))))
;;     ;; configure jsx-tide checker to run after your default jsx checker
;;     (flycheck-add-mode 'javascript-eslint 'web-mode)
;;     (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
;;     )
;;   )
;; (defun trigger-tide-setup ()
;;   (interactive)
;;   (enable-minor-mode
;;    '("\\.ts[x]?" . setup-tide-mode)))
;; (eval-after-web-mode-load 'trigger-tide-setup)
#+end_src
*** Multi-Web-Mode 
:PROPERTIES:
:CUSTOM_ID: multi-web-mode
:END:
#+begin_src emacs-lisp
;; (use-package multi-web-mode
;; :after web-mode
;; :config
;; (setq mweb-default-major-mode 'html-mode) ; Задаём режим HTML как основной.
;; (setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
;;                   (js2-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
;;                   (css-mode "<style +type=\"text/css\"[^>]*>" "</style>"))) ; Задаём правила для PHP, JavaScript и CSS.
;; (setq mweb-filename-extensions '("htm" "html" "ctp" "php" "phtml" "tpl")) ; Указываем список расширений файлов.
;; (multi-web-global-mode 1) ; Активируем multi-web-mode глобально.
;; )
#+end_src
*** JSON 
:PROPERTIES:
:CUSTOM_ID: json
:END:
#+begin_src emacs-lisp
(use-package json-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
  )
#+end_src
*** Yaml
:PROPERTIES:
:CUSTOM_ID: yaml
:END:
#+begin_src emacs-lisp
(use-package yaml-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  )
#+end_src
*** Treesitter
:PROPERTIES:
:CUSTOM_ID: treesitter
:END:
#+begin_src emacs-lisp
(after! tree-sitter
  (setq treesit-language-source-alist
	'((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
	  (c . ("https://github.com/tree-sitter/tree-sitter-c"))
	  (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
	  (css . ("https://github.com/tree-sitter/tree-sitter-css"))
	  (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
	  (go . ("https://github.com/tree-sitter/tree-sitter-go"))
	  (html . ("https://github.com/tree-sitter/tree-sitter-html"))
	  (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
	  (json . ("https://github.com/tree-sitter/tree-sitter-json"))
	  (julia . ("https://github.com/tree-sitter/tree-sitter-julia"))
	  (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
	  (make . ("https://github.com/alemuller/tree-sitter-make"))
	  (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" "master" "ocaml/src"))
     (python "https://github.com/tree-sitter/tree-sitter-python")
	  (php . ("https://github.com/tree-sitter/tree-sitter-php"))
	  (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
	  (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
	  (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
	  (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
	  (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
	  (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
	  (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))
  )
#+end_src
**** Treesitter-auto
:PROPERTIES:
:CUSTOM_ID: treesitter-auto
:END:
#+begin_src emacs-lisp
;; (use-package treesit-auto
;;   :config
;;   (global-treesit-auto-mode))
#+end_src
**** Treesitter
:PROPERTIES:
:CUSTOM_ID: treesitter-0
:END:
#+begin_src emacs-lisp
(setq tsc-dyn-get-from'(:compilation))
(use-package tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  )
(use-package tree-sitter-langs)
#+end_src
* Codeium 
:PROPERTIES:
:CUSTOM_ID: codeium
:END:
#+begin_src emacs-lisp
(use-package codeium
  :ensure (codeium :host github :repo "Exafunction/codeium.el")

  ;; if you use straight
  ;; :straight '(:type git :host github :repo "Exafunction/codeium.el")
  ;; otherwise, make sure that the codeium.el file is on load-path

  :init
  ;; use globally
  ;; (add-to-list 'completion-at-point-functions 'codeium-completion-at-point) ;; ПОЧЕМУ-ТО не работает нормально
  ;; or on a hook
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local completion-at-point-functions '(codeium-completion-at-point))))

  ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local completion-at-point-functions
  ;;             (list (cape-super-capf #'codeium-completion-at-point #'lsp-completion-at-point)))))
  ;; an async company-backend is coming soon!

  ;; codeium-completion-at-point is autoloaded, but you can
  ;; optionally set a timer, which might speed up things as the
  ;; codeium local language server takes ~0.2s to start up
  (add-hook 'emacs-startup-hook
            (lambda () (run-with-timer 0.4 nil #'codeium-init)))

  ;; :defer t ;; lazy loading, if you want
  :config
  ;;(setq use-dialog-box nil) ;; do not use popup boxes

  ;; if you don't want to use customize to save the api-key
  ;; (setq codeium/metadata/api_key "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")

  ;; get codeium status in the modeline
  ;;(setq codeium-mode-line-enable
  ;;      (lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
  ;;(add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)
  ;; alternatively for a more extensive mode-line
  (add-to-list 'mode-line-format '(-50 "" codeium-mode-line) t)

  ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
  (setq codeium-api-enabled
	(lambda (api)
          (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))
  ;; you can also set a config for a single buffer like this:
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local codeium/editor_options/tab_size 4)))

  ;; You can overwrite all the codeium configs!
  ;; for example, we recommend limiting the string sent to codeium for better performance
  (defun my-codeium/document/text ()
    (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))
  ;; if you change the text, you should also change the cursor_offset
  ;; warning: this is measured by UTF-8 encoded bytes
  (defun my-codeium/document/cursor_offset ()
    (codeium-utf8-byte-length
     (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
  (setq codeium/document/text 'my-codeium/document/text)
  (setq codeium/document/cursor_offset 'my-codeium/document/cursor_offset))

(defun my/complete-codeium ()
  "Manual codeium running"
  (interactive)
  (when (not (member 'codeium-completion-at-point completion-at-point-functions))
    (setq capb completion-at-point-functions) ; Резервируем в переменную capb текущее состояние
    (setq completion-at-point-functions '(codeium-completion-at-point t)) ; Подключаем Codeium
    (call-interactively 'corfu-complete) ; Вызываем Company
    (setq completion-at-point-functions capb)
    (kill-local-variable 'capb))) ; Возвращаем все на свои места

(defun my/strict-complete-codeium ()
  "Manual codeium running, but works even when auto completion is on"
  (interactive)
  (setq capb completion-at-point-functions) ; Резервируем в переменную capb текущее состояние
  (setq completion-at-point-functions '(codeium-completion-at-point t)) ; Подключаем Codeium
  (call-interactively 'corfu-complete) ; Вызываем Company
  (setq completion-at-point-functions capb)
  (kill-local-variable 'capb)) ; Возвращаем все на свои места

(defun my/toggle-codeium ()
  "Manually toggle codeium auto completion"
  (interactive)
  (if (member 'codeium-completion-at-point completion-at-point-functions)
      (progn
	(setq completion-at-point-functions (delq 'codeium-completion-at-point completion-at-point-functions))
	(message "Codeium auto complete off"))
    (add-to-list 'completion-at-point-functions 'codeium-completion-at-point)
    (message "Codeium auto complete on")))
#+end_src
* TODO Polymode
:PROPERTIES:
:CUSTOM_ID: polymode
:END:
#+begin_src emacs-lisp
;; (use-package polymode)
;; (elpaca-wait)
;; (use-package poly-org)
#+end_src
