#+TITLE:XenHunt Config (base)
#+AUTHOR: Evgeny Berlizov (XenHunt)
#+DESCRIPTION: XenHunt's config of basic features
#+STARTUP: content
#+PROPERTY: header-args :tangle base.el
* Содержание
:PROPERTIES:
:TOC:      :include all :depth 100 :force (nothing) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#введение][Введение]]
- [[#fast-loading][Fast-Loading]]
- [[#по-умолчанию][По-умолчанию]]
- [[#elpaca-fixes][Elpaca Fixes]]
  - [[#closql][Closql]]
  - [[#jsonrpc][Jsonrpc]]
- [[#startup-time-boost][Startup time boost]]
- [[#alias-for-yesno][Alias for yes/no]]
- [[#emacs][Emacs]]
- [[#general-keybindigs][General Keybindigs]]
- [[#wgrep][Wgrep]]
- [[#smartparens][Smartparens]]
- [[#helpful][Helpful]]
- [[#expand-region][Expand-region]]
- [[#aggresive-indent][Aggresive Indent]]
- [[#evil-mode][Evil-Mode]]
  - [[#collection][Collection]]
  - [[#smartparens-0][Smartparens]]
  - [[#surround][Surround]]
  - [[#evil-embrace][Evil-Embrace]]
  - [[#diff][Diff]]
  - [[#nerd-commenter][Nerd-Commenter]]
  - [[#visulstar][Visulstar]]
  - [[#evil-mc][Evil-MC]]
  - [[#evil-googles][Evil-Googles]]
  - [[#evil-matchit][Evil-Matchit]]
  - [[#evil-fold][Evil-Fold]]
  - [[#evil-args][Evil-Args]]
  - [[#evil-org][Evil-Org]]
- [[#diminish][Diminish]]
- [[#exec-path-from-shell][Exec-path-from-shell]]
- [[#editor-config][Editor-Config]]
- [[#shell][Shell]]
  - [[#vterm][VTerm]]
- [[#which-key][Which-key]]
- [[#dired][Dired]]
  - [[#base][Base]]
  - [[#dired-open][Dired-open]]
  - [[#peep-dired][Peep-Dired]]
  - [[#image-dired][Image-Dired+]]
  - [[#dired-open-with][Dired-Open-With]]
- [[#projectile][Projectile]]
- [[#tramp][Tramp]]
  - [[#ssh-machine][SSH-Machine]]
- [[#pass][Pass]]
- [[#provide][Provide]]
:END:
* Введение
:PROPERTIES:
:CUSTOM_ID: введение
:END:

Эта часть конфига посвящена базовой настройке моего =Emacs=. Здесь будут настроенные самые базовые вещи без которых невозможно обойтись (импорт базовых вещей, ус)

* Fast-Loading
:PROPERTIES:
:CUSTOM_ID: fast-loading
:END:

Быстрая загрузка модуля.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

* По-умолчанию
:PROPERTIES:
:CUSTOM_ID: по-умолчанию
:END:

Всякая конфигурация по-умолчанию, которая не может быть отнесена к чему-то определенному.

#+begin_src emacs-lisp
(setq native-comp-async-report-warnings-errors nil)
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
;; (electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(setq recentf-max-menu-items 100)
(setq recentf-max-saved-items 150)
(electric-pair-mode -1)       ;; Turns on automatic parens pairing
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(setq tab-width 4)
(setq indent-tabs-mode nil)
(setq confirm-kill-emacs 'y-or-n-p)
(add-hook 'org-mode-hook (lambda ()
			   (setq-local electric-pair-inhibit-predicate
				       `(lambda (c)
					  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
;; (defun my-scroll-precision-mode ()

;;   (unless (memq major-mode '(pdf-view-mode)) ; замените mode1 и mode2 на режимы, в которых не нужно включать display-line-numbers-mode
;;     (pixel-scroll-precision-mode)))

;; (add-hook 'prog-mode-hook 'my-scroll-precision-mode)
;; (add-hook 'text-mode-hook 'my-scroll-precision-mode)
(global-hl-line-mode 1)
(setq echo-keystrokes 0.01)
(setq pixel-scroll-precision-mode 1)
(setq user-cache-dir (concat user-emacs-directory ".local/cache/"))
(setq backup-by-copying t)
#+end_src
* Elpaca Fixes
:PROPERTIES:
:CUSTOM_ID: elpaca-fixes
:END:
** Closql
:PROPERTIES:
:CUSTOM_ID: closql
:END:
#+begin_src emacs-lisp
(use-package closql
  :ensure (closql :depth nil)
  :defer t)
#+end_src
** Jsonrpc
:PROPERTIES:
:CUSTOM_ID: jsonrpc
:END:
#+begin_src emacs-lisp
(use-package jsonrpc
  :ensure (jsonrpc :depth 1)
  :defer t)
#+end_src
* Startup time boost
:PROPERTIES:
:CUSTOM_ID: startup-time-boost
:END:
#+begin_src emacs-lisp
(use-package fnhh
  :ensure (:type git :host github :repo "a13/fnhh")
  :config
  (fnhh-mode 1))
#+end_src
* Alias for yes/no
:PROPERTIES:
:CUSTOM_ID: alias-for-yesno
:END:
#+begin_src emacs-lisp
(ignore-errors
  (setq confirm-kill-emacs 'y-or-n-p)
  (defalias 'yes-or-no-p 'y-or-n-p))
#+end_src
* Emacs 
:PROPERTIES:
:CUSTOM_ID: emacs
:END:
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  (custom-file (concat user-emacs-directory "secrets.el"))
  (tab-width 4)
  :config
  (setq gc-cons-threshold 100000000)
  (setq ring-bel-functuin #'ignore)  
  (setq text-mode-ispell-word-completion nil)
  (setq tab-always-indent 'complete)
  (unless (or (file-exists-p (file-truename "~/.Trash/"))
               (file-symlink-p (file-truename "~/.Trash/")))
    (make-symbolic-link (file-truename "~/.local/share/Trash/")
                        (file-truename "~/.Trash")))

  (setq backup-directory-alist '((".*" . "~/.Trash/files/")))
  (after! auth-source
    (auth-source-pass-enable))
  (setq read-process-output-max (* 1024 1024 10)))
  (elpaca-wait)

#+end_src
* General Keybindigs
:PROPERTIES:
:CUSTOM_ID: general-keybindigs
:END:

#+begin_src emacs-lisp
(use-package general :ensure t :demand t
  ;; :after evil
  :config
  (general-auto-unbind-keys)
  (general-evil-setup)
  (general-auto-unbind-keys)
  ;; (general-define-key
  ;;  :keymaps '(normal insert visual emacs )
  ;;  :prefix "SPC"
  ;;  "" nil)

  (general-create-definer leader-key
    :states '(normal emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")

  (leader-key "" nil)

  (leader-key
    "b" '(:ignore t :wk "Buffers")
    "b b" '(consult-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "IBuffer")
    "b K" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b m" '(bookmark-set :wk "Set Bookmark")
    "b l" '(list-bookmarks :wk "List Bookmarks")
    "b k" '(kill-buffer :wk "Kill Buffer")
    )

  (leader-key
    "'" '(:ignore t :wk "Bookmarks")
    "' '" '(bookmark-set :wk "Set Bookmark")
    "' d" '(bookmark-delete :wk "Delete Bookmark")
    "' c" '(consult-bookmark :wk "Consult Bookmarks")
    "' l" '(list-bookmarks :wk "List Bookmarks")
    )

  (leader-key
    "g" '(:ignore t :wk "Git/Docker")
    "g g" '(magit :wk "Start Magit")
    "g s" '(magit-status :wk "Status")
    "g d" '(magit-diff :wk "Diff")
    "g t" '(git-timemachine :wk "Timemachine")
    "g D" '(docker :wk "Docker")
    )

  (leader-key
    "i" '(:ingore t :wk "Insert")
    "i e" '(emoji-insert :wk "Insert")
    "i c" '(insert-char :wk "Character")
    "i t" '(table-insert :wk "Table")
    "i y" '(consult-yasnippet :wk "Snippet")

    )
  (leader-key
    "s" '(:ignore t :wk "Search")
    "s b" '(consult-buffer :wk "Buffer")
    "s i" '(consult-imenu :wk "Imenu")
    "s f" '(consult-omni-fd :wk "File")
    "s a" '(consult-omni-apps :wk "Apps")
    "s t" '(consult-omni-ripgrep :wk "Text")
    "s T" '(consult-omni-ripgrep-all :wk "Text (even pdf, archives and etc)")
    "s g" '(consult-omni-git-grep :wk "Git Files")
    ;; "s G" '(consult-omni-github :wk "Github repos")
    "s p" '(pass :wk "Password")
    ;; "s "
    )
  (leader-key
    "f" '(:ignore t :wk "Files")
    "." '(find-file :wk "Find File")
    "f C" '((lambda () (interactive) (find-file "~/.emacs.d/")) :wk "Find files in config folder")
    "f c" '((lambda () (interactive) (find-file "~/.emacs.d/lisp/conf-files/")) :wk "Edit config file")
    "f r" '(consult-recent-file :wk "Find recent file")
    ;; "f f" '(consult-omni-fd :wk "Find file (consult)")
    )

  (general-define-key
   :states 'normal
   :keymaps 'prog-mode-map
   :prefix "SPC"
   "c" '(:ignore t :wk "Code")
   "c s" '(consult-lsp-symbols :wk "Search symbol")
   "c a" '(:ignore t :wk "Actions")
   "c =" '(:ignore t :wk "Format")
   "c F" '(:ignore t :wk "Workspace Folders")
   "c g" '(:ignore t :wk "Find")
   "c G" '(:ignore t :wk "UI Peek")
   "c h" '(:ignore t :wk "Help?")
   "c r" '(:ignore t :wk "Organize/Rename")
   "c T" '(:ignore t :wk "Toggle")
   "c w" '(:ignore t :wk "Maintenance")
   
   "c c" '(compile :wk "Compile code")
   ;; "c r" '(lsp-rename :wk "Rename object")
   ;; "c d" '(lsp-find-definition :wk "Find definition")
   ;; "c x" '(consult-flycheck :wk "List errors")
   ;; "c R" '(lsp-workspace-restart :wk "Restart LSP")
   "c ." '(i-really-want-to-dumb-jump :wk "Find definition")
   "c x" '(:ignore t :wk "Consult")
   "c x x" '(consult-flycheck :wk "Flycheck")
   "c x s" '(consult-lsp-symbols :wk "Symbols")
   "c x d" '(consult-lsp-diagnostics :wk "Diagnostics"))

  (general-define-key
   :keymaps 'projectile-command-map
   ;; :prefix "SPC p" ; Префикс для доступа к ключам projectile-command-map
   "f" 'consult-projectile-find-file
   "p" 'consult-projectile-switch-project
   "d" 'consult-projectile-find-dir
   "b" 'consult-projectile-switch-to-buffer
   ;; "s" 'projectile-switch-project
   ;; "g" 'projectile-ag
   ;; Добавьте другие свои привязки клавиш здесь
   )

  (leader-key
    "p" '(projectile-command-map :wk "Projectile"))
  (global-set-key (kbd "C-+") '(lambda () (interactive) (text-scale-increase 0.1)))
  (global-set-key (kbd "C--") '(lambda () (interactive) (text-scale-decrease 0.1)))

  ;; (leader-key
  ;;   "e" '(:ignore t :wk "Evaluate")
  ;;   "e b" '(eval-buffer :wk "Evaluate buffer")
  ;;   "e d" '(eval-defun :wk "Evaluate defun or after a point")
  ;;   "e e" '(eval-expression :wk "Evaluate expression")
  ;;   "e l" '(eval-last-sexp :wk "Evaluate expression before point")
  ;;   "e r" '(eval-region :wk "Evaluate region"))

  (leader-key
    "h"  '(:ignore t :wk "Help")
    "h d" '(devdocs-lookup :wk "Devdocs current")
    "h D" '(devdocs-peruse :wk "Devdocs search")
    "h e" '(:ignore t :wk "Evaluate")
    "h e e" '(eval-expression :wk "Expression")
    "h e r" '(eval-region :wk "Region")
    "h e b" '(eval-buffer :wk "Buffer")
    "h f" '(helpful-function :wk "Describe function")
    "h v" '(helpful-variable :wk "Describe variable")
    "h ." '(helpful-at-point :wk "Help at point")
    "h m" '(helpful-macro :wk "Describe macro")
    "h E" '(elpaca-manager :WK "Elpaca manager")
    "h M" '(describe-mode :wk "Describe mode")
    "h p" '(describe-package :wk "Describe package")
    "h k" '(describe-key :wk "Describe key")
    "h K" '(describe-keymap :wk "Describe keymap")
    "h l" '(view-lossage :wk "History of key seq")
    "h c" '(command-history :wk "History of commands")
    "h r r" '((lambda () (interactive) (load-file user-init-file)(ignore (elpaca-process-queues))) :wk "Reload emacs config"))

  (leader-key
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    )

  (leader-key
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w <left>" '(evil-window-left :wk "Window left")
    "w <down>" '(evil-window-down :wk "Window down")
    "w <up>" '(evil-window-up :wk "Window up")
    "w <right>" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right")
    "w q" '(kill-buffer-and-window :wk "Kill buffer with window")
    )

  (leader-key
    "C-c" '(:ignore t :wk "Codeium")
    "C-c t" '(my/toggle-codeium :wk "Toggle Codeium")
    "C-c c" '(my/strict-complete-codeium :wk "Call Codeium Completion")
    )

  )
(elpaca-wait)
#+end_src

#+RESULTS:

* Wgrep
:PROPERTIES:
:CUSTOM_ID: wgrep
:END:
#+begin_src emacs-lisp
(use-package wgrep)
#+end_src
* Smartparens 
:PROPERTIES:
:CUSTOM_ID: smartparens
:END:
#+begin_src emacs-lisp
;; (use-package smartparens-config)
(use-package smartparens-mode
  :ensure smartparens  ;; install the package
  :hook (prog-mode text-mode markdown-mode) ;; add `smartparens-mode` to these hooks
  :config
  ;; load default config
  (require 'smartparens-config))

#+end_src
* Helpful
:PROPERTIES:
:CUSTOM_ID: helpful
:END:
#+begin_src emacs-lisp
(use-package helpful)
#+end_src
* Expand-region
:PROPERTIES:
:CUSTOM_ID: expand-region
:END:
#+begin_src emacs-lisp
(use-package expand-region
  :ensure (:depth nil)
  :after general
  :config
  (leader-key
    "=" '(er/expand-region :wk "Expand region")
    "-" '(er/contract-region :wk "Contract region")
    )
  )
(elpaca-wait)
#+end_src
* Aggresive Indent
:PROPERTIES:
:CUSTOM_ID: aggresive-indent
:END:
#+begin_src emacs-lisp
(use-package aggressive-indent
  :config
  (setq global-aggressive-indent-mode 1)
  )
  #+end_src
* Evil-Mode
:PROPERTIES:
:CUSTOM_ID: evil-mode
:END:
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  
  (setq evil-want-C-i-jump nil)
  (setq evil-want-c-i-jump nil)

  :config
  (evil-define-key 'normal 'global (kbd "g c") 'comment-line)
  (evil-define-key 'visual 'global (kbd "g c") 'comment-dwim)
  (evil-define-key 'normal org-mode-map (kbd "RET") 'org-babel-execute-src-block)
  (evil-define-key 'normal org-mode-map (kbd "C-M-<down>") 'org-promote-subtree)
  (evil-set-leader nil (kbd "SPC"))
  (evil-define-key 'normal org-mode-map (kbd "C-M-<up>") 'org-demote-subtree)
  (evil-set-undo-system 'undo-redo)
  (evil-mode)
  )

;; (use-package evil-tutor :ensure t :demand t)
(elpaca-wait)

;; Setting RETURN key in org-mode to follow links
(setq org-return-follows-link  t)

#+end_src
** Collection
:PROPERTIES:
:CUSTOM_ID: collection
:END:
#+begin_src emacs-lisp
(use-package evil-collection :ensure t :demand t
  :after evil
  :config
  (setq evil-collection-mode-list '(
                                    arc-mode
 				    dashboard
                                    docker
 				    dired
 				    dired-sidebar
				    pass
				    doc-view
                                    disk-usage
                                    (image image-mode)
                                    daemons
                                    cider
                                    image+
                                    image-dired
				    devdocs
                                    help
                                    scheme
 				    ibuffer
 				    minibuffer
 				    sh-script
 				    compile
                                    helpful
 				    bookmark
 				    magit
 				    magit-todos
 				    forge
 				    git-timemachine
 				    vterm
 				    bufler
 				    indent
                                    telega
 				    corfu
 				    consult
 				    vertico
                                    guix
                                    bufler 
				    embark
                                    wdired
                                    wgrep
                                    xwidget
				    which-key
				    (pdf pdf-view)
				    elpaca
				    imenu
				    imenu-list
                                    nov
				    org
				    org-roam
				    python
				    elisp-mode
				    typescript-mode
				    evil-mc
				    yaml-mode
				    flycheck
				    flymake
				    elfeed
				    js2-mode
                                    smerge-mode
				    ;; rjsx-modre
				    xref
                                    lsp-ui-imenu
                                    man
                                    woman
 				    ))
  (evil-collection-init)
  )
(elpaca-wait)


(after! 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil)
  (define-key evil-motion-state-map (kbd "C-o") nil)
  )

#+end_src

#+RESULTS:

** Smartparens
:PROPERTIES:
:CUSTOM_ID: smartparens-0
:END:
#+begin_src emacs-lisp
(use-package evil-smartparens
  :after smartparens-mode
  :config
  (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)
  )
#+end_src
** Surround
:PROPERTIES:
:CUSTOM_ID: surround
:END:
#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  ;; :commands (global-evil-surround-mode
  ;;            evil-surround-edit
  ;;            evil-Surround-edit
  ;;            evil-surround-region)
  :config (global-evil-surround-mode 1))

#+end_src
** Evil-Embrace
:PROPERTIES:
:CUSTOM_ID: evil-embrace
:END:
#+begin_src emacs-lisp

(use-package embrace

  :ensure (:depth nil)
  )
(elpaca-wait)


(use-package evil-embrace
  :commands embrace-add-pair embrace-add-pair-regexp
  :hook (LaTeX-mode . embrace-LaTeX-mode-hook)
  :hook (org-mode . embrace-org-mode-hook)
  :hook (ruby-mode . embrace-ruby-mode-hook)
  :hook (emacs-lisp-mode . embrace-emacs-lisp-mode-hook)
  ;; :hook ((c++-mode c++-ts-mode rustic-mode csharp-mode java-mode swift-mode typescript-mode)
  ;;        . +evil-embrace-angle-bracket-modes-hook-h)
  ;; :hook (scala-mode . +evil-embrace-scala-mode-hook-h)
  :init
  (after! evil-surround
    (evil-embrace-enable-evil-surround-integration))
  )
(elpaca-wait)
#+end_src
** Diff
:PROPERTIES:
:CUSTOM_ID: diff
:END:
#+begin_src emacs-lisp
;; (use-package evil-quick-diff
;;   :commands (evil-quick-diff evil-quick-diff-cancel))
#+end_src
** Nerd-Commenter
:PROPERTIES:
:CUSTOM_ID: nerd-commenter
:END:
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :commands (evilnc-comment-operator
             evilnc-inner-comment
             evilnc-outer-commenter)
  ;; :general ([remap comment-line] #'evilnc-comment-or-uncomment-lines)
  )
#+end_src
** Visulstar
:PROPERTIES:
:CUSTOM_ID: visulstar
:END:
#+begin_src emacs-lisp
(use-package evil-visualstar
  :commands (evil-visualstar/begin-search
             evil-visualstar/begin-search-forward
             evil-visualstar/begin-search-backward)
  :init
  (evil-define-key* 'visual 'global
    "*" #'evil-visualstar/begin-search-forward
    "#" #'evil-visualstar/begin-search-backward))
#+end_src
** Evil-MC
:PROPERTIES:
:CUSTOM_ID: evil-mc
:END:
#+begin_src emacs-lisp
(use-package evil-mc
  :after evil
  :config
  (global-evil-mc-mode  1) ;; enable
  )
#+end_src
** Evil-Googles
:PROPERTIES:
:CUSTOM_ID: evil-googles
:END:
#+begin_src emacs-lisp
(use-package evil-goggles
  :ensure t
  :config
  (evil-goggles-mode)

  ;; optionally use diff-mode's faces; as a result, deleted text
  ;; will be highlighed with `diff-removed` face which is typically
  ;; some red color (as defined by the color theme)
  ;; other faces such as `diff-added` will be used for other actions
  (evil-goggles-use-diff-faces))
#+end_src
** Evil-Matchit
:PROPERTIES:
:CUSTOM_ID: evil-matchit
:END:
#+begin_src emacs-lisp
(use-package evil-matchit
  :config
  (global-evil-matchit-mode 1))
#+end_src
** Evil-Fold
:PROPERTIES:
:CUSTOM_ID: evil-fold
:END:
#+begin_src emacs-lisp
(use-package vimish-fold
  ;; :ensure
  :after evil)

(use-package evil-vimish-fold
  ;; :ensure
  :after vimish-fold
  :init
  (setq evil-vimish-fold-mode-lighter " ⮒")
  (setq evil-vimish-fold-target-modes '(prog-mode conf-mode text-mode))
  :config
  (global-evil-vimish-fold-mode))
#+end_src
** Evil-Args
:PROPERTIES:
:CUSTOM_ID: evil-args
:END:
#+begin_src emacs-lisp
(use-package evil-args
  ;; :hook ((emacs-lisp-mode clojure-ts-mode clojure-mode scheme-mode) #'setup-evil-args-for-lisp)
  ;; :init
  ;; (defun my/evil-args-hook ()
  ;;   (setq-local evil-args-delimiters " "))
  ;; (defun my/setup-evil-args-lisp ()
  ;;   (let ((hooks '('emacs-lisp-mode-hook 'clojure-ts-mode-hook 'clojure-mode-hook 'scheme-mode-hook)))
  ;;     (mapcar (lambda (x)
  ;; 		(unless (member #'my/evil-args-hook x)
  ;; 		  (add-hook #'my/evil-args-hook x))) hooks)))
  :config
  ;; (add-hook 'server-after-make-frame-hook #'my/setup-evil-args-lisp)
  ;; bind evil-args text objects
  (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
  (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

  ;; bind evil-forward/backward-args
  (define-key evil-normal-state-map "L" 'evil-forward-arg)
  (define-key evil-normal-state-map "H" 'evil-backward-arg)
  (define-key evil-motion-state-map "L" 'evil-forward-arg)
  (define-key evil-motion-state-map "H" 'evil-backward-arg)

  ;; bind evil-jump-out-args
  (define-key evil-normal-state-map "K" 'evil-jump-out-args)
  )
#+end_src

#+RESULTS:
: [nil 26421 43836 28126 nil elpaca-process-queues nil nil 955000 nil]

** Evil-Org
:PROPERTIES:
:CUSTOM_ID: evil-org
:END:
#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
* Diminish 
:PROPERTIES:
:CUSTOM_ID: diminish
:END:
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
* Exec-path-from-shell 
:PROPERTIES:
:CUSTOM_ID: exec-path-from-shell
:END:
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  ;; :custom
  ;; (exec-path-from-shell-arguments '("-l"))
  :config
  ;; (when (daemonp)
    (exec-path-from-shell-initialize)
    ;; )
  )
#+end_src
* Editor-Config 
:PROPERTIES:
:CUSTOM_ID: editor-config
:END:
#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src
* Shell
:PROPERTIES:
:CUSTOM_ID: shell
:END:
** VTerm
:PROPERTIES:
:CUSTOM_ID: vterm
:END:
#+begin_src emacs-lisp
(use-package vterm
  :custom
  (vterm-always-compile-module t)
  :config
  (defun vterm-spawn (&optional args)
    (let ((name (or args "")))
      ;; (message name)
      (if (not (string-empty-p name))
          (vterm name)
        (vterm "Vterm"))))
  ;; (vterm-spawn)
  ;; (dired "")
  (setq shell-file-name "/bin/zsh"
        vterm-max-scrollback 5000)
  (leader-key
    "o t" '(vterm-other-window :wk "Opens Vterm in other window")
    "o T" '(vterm :wk "Open VTerm instead of this buffer")
    )
  (general-define-key
   ;; :definer 'minor-mode
   :states 'normal
   :keymaps 'vterm-mode-map
   :prefix "SPC"
   
   "m" '(:ignore t :wk "VTerm commands")
   "m n" '(vterm-toggle-show :wk "Create new term")
   )
  )
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 ;;(dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3))))
  #+end_src
* Which-key
:PROPERTIES:
:CUSTOM_ID: which-key
:END:
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " )
  )
(elpaca-wait)
#+end_src
* Dired 
:PROPERTIES:
:CUSTOM_ID: dired
:END:
** Base 
:PROPERTIES:
:CUSTOM_ID: base
:END:
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :config

  (defun dired-spawn (&optional args)
    (let ((path (or args "")))
      (dired path)))
  ;; (dired-spawn)
  (setq delete-by-moving-to-trash 1
	trash-directory "/home/berlizoves/.Trash/files/")
  (setq
   dired-async-mode 1
   insert-directory-program "ls" 
   dired-use-ls-dired t
   ;; dired-listing-switches "-agho --group-directories-first" 
   dired-listing-switches "-aglhFo --group-directories-first" 
   )

  (add-hook 'dired-mode-hook (lambda ()
                               (when (file-remote-p dired-directory)
                                 (setq-local dired-listing-switches "-aglhF"
                                             dired-actual-switches "-aglhF"))))
  (setq  dired-use-ls-dired nil)
  (setq  image-dired-dir (concat user-cache-dir "image-dired/")
	 image-dired-db-file (concat image-dired-dir "db.el")
	 image-dired-gallery-dir (concat image-dired-dir "gallery/")
	 image-dired-temp-image-file (concat image-dired-dir "temp-image")
	 image-dired-temp-rotate-image-file (concat image-dired-dir "temp-rotate-image")
	 ;; Screens are larger nowadays, we can afford slightly larger thumbnails
	 image-dired-thumb-size 150)
  )
#+end_src
** Dired-open 
:PROPERTIES:
:CUSTOM_ID: dired-open
:END:
#+begin_src emacs-lisp
(use-package dired-open
  :after dired
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv")
                                ("exe" . "portproton"))))
#+end_src
** Peep-Dired 
:PROPERTIES:
:CUSTOM_ID: peep-dired
:END:
#+begin_src emacs-lisp
(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :init
  (evil-define-key 'normal dired-mode-map
    (kbd "M-RET") 'dired-display-file
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
    (kbd "m") 'dired-mark
    (kbd "t") 'dired-toggle-marks
    (kbd "u") 'dired-unmark
    (kbd "D") 'dired-do-delete
    (kbd "J") 'dired-goto-file
    (kbd "M") 'dired-do-chmod
    (kbd "O") 'dired-do-chown
    (kbd "P") 'dired-do-print
    (kbd "R") 'dired-do-rename
    (kbd "T") 'dired-create-empty-file
    (kbd "Y") 'dired-copy
    (kbd "Z") 'dired-do-compress
    (kbd "+") 'dired-create-directory
    (kbd "-") 'dired-do-kill-lines
    (kbd "% l") 'dired-downcase
    (kbd "% m") 'dired-mark-files-regexp
    (kbd "% u") 'dired-upcase
    (kbd "* %") 'dired-mark-files-regexp
    (kbd "* .") 'dired-mark-extension
    (kbd "* /") 'dired-mark-directories
    (kbd "; d") 'epa-dired-do-decrypt
    (kbd "; e") 'epa-dired-do-encrypt
    )
  )
#+end_src
** Image-Dired+
:PROPERTIES:
:CUSTOM_ID: image-dired
:END:
#+begin_src emacs-lisp
(use-package image-dired+
  :after dired
  :config
  (setq image-diredx-async-mode 1
        image-diredx-adjust-mode 1)
  )
#+end_src

#+RESULTS:
: [nil 26345 33176 786413 nil elpaca-process-queues nil nil 98000 nil]
** Dired-Open-With
:PROPERTIES:
:CUSTOM_ID: dired-open-with
:END:
#+begin_src emacs-lisp
(use-package dired-open-with
  :after dired
  :config
  (evil-define-key 'normal dired-mode-map
    (kbd "C-<return>") 'dired-open-with)
  )
#+end_src

#+RESULTS:
: [nil 26345 34307 967024 nil elpaca-process-queues nil nil 467000 nil]

* Projectile 
:PROPERTIES:
:CUSTOM_ID: projectile
:END:
#+begin_src emacs-lisp
(use-package projectile
  :custom
  (projectile-ignore-projects '("~/.emacs.d/" "~/.emacs.d/*" "~/"))
  :config
  (leader-key
    "p" '(:ignore t :wk "Project"))
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  ;; (pushnew! projectile-project-root-files "package.json")
  ;; (pushnew! projectile-globally-ignored-directories "^node_modules$" "^flow-typed$")
  (projectile-mode 1))

#+end_src
* Tramp
:PROPERTIES:
:CUSTOM_ID: tramp
:END:
#+begin_src emacs-lisp
(use-package tramp
  :ensure nil
  :custom
  (tramp-default-method "ssh")
  ;; :config
  ;; (setq tramp-default-method "ssh"
  ;;       tramp-verbose 6)
  )
;; (use-package auto-sudoedit
;;   :custom
;;   (auto-sudoedit-mode 1))
(use-package ssh-config-mode)
;; (use-package ssh)
;; (setq tramp-default-method "ssh"
;;       tramp-verbose 6)
#+end_src

** SSH-Machine
:PROPERTIES:
:CUSTOM_ID: ssh-machine
:END:
#+begin_src emacs-lisp
;; (use-package tramp-ssh
;;   :config
;;   (add-to-list 'tramp-remote-path "/usr/local/sbin")
;;   (add-to-list 'tramp-remote-path "/opt/java/current/bin")
;;   (add-to-list 'tramp-remote-path "/opt/gradle/current/bin")
;;   (add-to-list 'tramp-remote-path "~/bin")))
;; (use-package ssh-machine
;;   :ensure (ssh-machine :host github :type git :repo "charmitro/emacs-ssh-machines" :branch "master" :main "init-ssh.el" :files ("*.el")))
#+end_src
* Pass
:PROPERTIES:
:CUSTOM_ID: pass
:END:
#+begin_src emacs-lisp
(use-package password-store
  :custom
  (password-store-password-length 45))
(use-package pass)
;; (use-package password-store-menu
;;   :config (password-store-menu-enable))
;; (general-auto-unbind-keys)
#+end_src

#+RESULTS:
: [nil 26423 21558 891351 nil elpaca-process-queues nil nil 273000 nil]

* Provide
:PROPERTIES:
:CUSTOM_ID: provide
:END:
#+begin_src emacs-lisp
(provide 'base)
#+end_src
