#+TITLE:XenHunt Config (other)
#+AUTHOR: Evgeny Berlizov (XenHunt)
#+DESCRIPTION: XenHunt's config of other things
#+STARTUP: content
#+PROPERTY: header-args :tangle other.el
* Содержание
:PROPERTIES:
:TOC:      :include all :depth 100 :force (nothing) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#введение][Введение]]
- [[#fast-loading][Fast-Loading]]
- [[#mine-indent-transient][Mine Indent Transient]]
- [[#activities][Activities]]
- [[#easysession][Easysession]]
- [[#beacon][Beacon]]
- [[#completion][Completion]]
  - [[#flycheck][Flycheck]]
  - [[#vertico][Vertico]]
  - [[#corfu][Corfu]]
    - [[#nerd-icons][Nerd-Icons]]
  - [[#dabbrev][Dabbrev]]
  - [[#cape][Cape]]
  - [[#orderless][Orderless]]
  - [[#marginalia][Marginalia]]
  - [[#embark][Embark]]
  - [[#consult][Consult]]
  - [[#yasnippet][Yasnippet]]
- [[#drag-stuff][Drag-stuff]]
- [[#casual][Casual]]
- [[#sudo-edit][SUDO EDIT]]
- [[#pdf-tools][PDF-Tools]]
- [[#nov-mode][Nov-mode]]
- [[#djvu][Djvu]]
- [[#fb2][FB2]]
- [[#imenu][Imenu]]
  - [[#imenu-list][Imenu-List]]
- [[#ibuffer][IBuffer]]
  - [[#nerd-icons-ibuffer][Nerd-Icons-IBuffer]]
- [[#jinx][Jinx]]
- [[#markdown-mode][Markdown-Mode]]
- [[#guix][Guix]]
- [[#leetcode][Leetcode]]
- [[#disk-usage][Disk-Usage]]
- [[#daemons][Daemons]]
- [[#command-log-mode][Command-log-mode]]
- [[#trashed][Trashed]]
- [[#screenshot][Screenshot]]
- [[#gnuplot][Gnuplot]]
- [[#colorful][Colorful]]
- [[#grip][Grip]]
- [[#quick-sdcv][Quick-Sdcv]]
- [[#auto-dim-other-buffer][Auto-Dim-Other-Buffer]]
- [[#systemd][Systemd]]
- [[#emojify][Emojify]]
- [[#bufferfile][Bufferfile]]
- [[#provide][Provide]]
:END:
* Введение
:PROPERTIES:
:CUSTOM_ID: введение
:END:

Эта часть конфига посвящена базовой настройке моего =Emacs=. Здесь будут настроенные самые базовые вещи без которых невозможно обойтись (импорт базовых вещей, ус)

* Fast-Loading
:PROPERTIES:
:CUSTOM_ID: fast-loading
:END:

Быстрая загрузка модуля.

#+begin_src emacs-lisp
;; -*- lexical-binding: t;  no-byte-compile: t -*-
#+end_src

* Mine Indent Transient
:PROPERTIES:
:CUSTOM_ID: mine-indent-transient
:END:
#+begin_src emacs-lisp
(defvar my/shift-size 4 "Number of spaces equivalent to one tab stop.")

(transient-define-infix my/shift-set-size--tmenu-infix ()
  "Set shift size."
  :class 'transient-lisp-variable
  :argument (lambda () (read-number "Enter shift size: "))
  :variable 'my/shift-size)


(defun my/indent-right ()
  (interactive)
  (let ((tab-width my/shift-size)
        (deactivate-mark nil))
    (call-interactively 'indent-rigidly-right-to-tab-stop)))

(defun my/indent-left ()
  (interactive)
  (let ((tab-width my/shift-size)
        (deactivate-mark nil))
    (call-interactively 'indent-rigidly-left-to-tab-stop)))

(transient-define-prefix my/shift-region-tmenu ()
  "Shift region left or right with customizable shift size."
  [["Shift"
    ("<left>" "Left" my/indent-left :transient t)
    ("<right>" "Right" my/indent-right :transient t)
    ("h" "Left" my/indent-left :transient t)
    ("l" "Right" my/indent-right :transient t)]]
  [["Settings"
    ("=" "Change shift size" my/shift-set-size--tmenu-infix)]])
(keymap-global-set "<remap> <indent-rigidly>" 'my/shift-region-tmenu)
#+end_src

* Activities
:PROPERTIES:
:CUSTOM_ID: activities
:END:
#+begin_src emacs-lisp
;; (use-package activities
;;   :init
;;   (activities-mode)
;;   ;; (activities-tabs-mode)
;;   ;; Prevent `edebug' default bindings from interfering.
;;   (setq edebug-inhibit-emacs-lisp-mode-bindings t)
;;   :config
;;   (leader-key
;;     "TAB" '(:ignore t :wk "Activities")
;;     "TAB n" '(activities-new :wk "New")
;;     "TAB d" '(activities-define :wk "Define")
;;     "TAB a" '(activities-resume :wk "Resume")
;;     "TAB s" '(activities-suspend :wk "Suspend")
;;     "TAB k" '(activities-kill :wk "Kill")
;;     "TAB RET" '(activities-switch :wk "Switch")
;;     "TAB b" '(activities-switch-buffer :wk "Switch buffer")
;;     "TAB g" '(activities-revert :wk "Revert")
;;     "TAB l" '(activities-list :wk "List")
;;     ))
#+end_src

* Easysession
:PROPERTIES:
:CUSTOM_ID: easysession
:END:
#+begin_src emacs-lisp
(use-package easysession
  :defer 2
  ;; :commands
  ;; (easysession-switch-to easysession-save-as)
  ;; :general
  ;; (:states 'normal '("TAB"))
  :config
  (defun my-setup-easy-session ()
    ;; (easysession-load-including-geometry)
    (easysession-save-mode)
    (remove-hook 'server-after-make-frame-hook #'my-setup-easy-session))

  (add-hook 'server-after-make-frame-hook #'my-setup-easy-session)
  (leader-key
    "TAB" '(:ignore t :wk "Session")
    "TAB TAB" '(easysession-switch-to :wk "Switch")
    "TAB s" '(easysession-save-as :wk "Save")
    "TAB d" '(easysession-delete :wk "Delete")))
    #+end_src

#+RESULTS:
: [nil 26444 1065 868595 nil elpaca-process-queues nil nil 730000 nil]

* Beacon
:PROPERTIES:
:CUSTOM_ID: beacon
:END:
#+begin_src emacs-lisp
(use-package beacon
  :custom
  (beacon-blink-duration 2)
  :config
  (beacon-mode 1)
  )
#+end_src

* Completion 
:PROPERTIES:
:CUSTOM_ID: completion
:END:
** Flycheck 
:PROPERTIES:
:CUSTOM_ID: flycheck
:END:
#+begin_src emacs-lisp
(use-package flycheck
  :diminish
  :ensure t
  :config
  (setq-default flycheck-disabled-checkers
		        (append flycheck-disabled-checkers
			            '(javascript-jshint json-jsonlist)))
  (flycheck-add-mode 'javascript-eslint 'web-mode)

  (add-hook 'after-init-hook #'global-flycheck-mode))
(use-package flycheck-guile
  )
;; (use-package flycheck-overlay
;;   :after flycheck
;;   :hook (flycheck-mode flycheck-overlay-mode))

#+end_src
** Vertico 
:PROPERTIES:
:CUSTOM_ID: vertico
:END:
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)
  ;; Sort directories before files
  (defun sort-directories-first (files)
    (setq files (vertico-sort-history-length-alpha files))
    (nconc (seq-filter (lambda (x) (string-suffix-p "/" x)) files)
           (seq-remove (lambda (x) (string-suffix-p "/" x)) files)))

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  :config
  (setq vertico-sort-function #'sort-directories-first)
  ;; (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
  )
(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)
  )
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package vertico-multiform
  :after vertico
  :ensure nil
  :config
  (vertico-multiform-mode)
  
  (after! jinx
    (add-to-list 'vertico-multiform-categories
		         '(jinx grid (vertico-grid-annotate . 20)))
    (vertico-multiform-mode 1))
  )
(use-package savehist
  :ensure nil
  :demand nil
  :init
  (savehist-mode))

#+end_src
** Corfu
:PROPERTIES:
:CUSTOM_ID: corfu
:END:
#+begin_src emacs-lisp
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  (corfu-scroll-margin 5)        ;; Use scroll margin
  (corfu-auto-delay 0.2)
  (corfu-popupinfo-delay '(0.0 . 0.0))
  ;; Enable Corfu only for certain modes.

  :hook ((prog-mode . corfu-mode))
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous)
        ("C-SPC" . corfu-insert-separator))
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode)

  :config
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer."
    (when (local-variable-p 'completion-at-point-functions)
      ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
  (corfu-history-mode)
  (add-to-list 'savehist-additional-variables 'corfu-history)
  
  (general-define-key
   :keymaps '(corfu-popupinfo-map)
   ;; :prefix "SPC"
   ;; "c" '(:ignore t :wk "Code")
   "C-s-<down>" '(corfu-popupinfo-scroll-up :wk "Down frame")
   "C-s-<up>" '(corfu-popupinfo-scroll-down :wk "Up frame")
   )
  )
;;(elpaca-wait)
#+end_src

#+RESULTS:
: [nil 26646 22564 99425 nil elpaca-process-queues nil nil 683000 nil]

*** Nerd-Icons
:PROPERTIES:
:CUSTOM_ID: nerd-icons
:END:
#+begin_src emacs-lisp
(use-package nerd-icons-corfu
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
  )

#+end_src
** Dabbrev 
:PROPERTIES:
:CUSTOM_ID: dabbrev
:END:
#+begin_src emacs-lisp
(use-package dabbrev
  :ensure nil
  :demand nil
  ;; Swap M-/ and C-M-/
  ;; :bind (("M-/" . dabbrev-completion)
  ;;        ("C-M-/" . dabbrev-expand))
  :config
  (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
  ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
  (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
(elpaca-wait)
#+end_src
** Cape 
:PROPERTIES:
:CUSTOM_ID: cape
:END:
#+begin_src emacs-lisp
(use-package cape
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  ;; (advice-add #'lsp-completion-at-point :around #'cape-wrap-debug)
  (after! lsp-mode
    (advice-add #'lsp-completion-at-point :around #'cape-wrap-noninterruptible)
    (advice-add #'lsp-completion-at-point :around #'cape-wrap-nonexclusive)
    )
  (advice-add #'comint-completion-at-point :around #'cape-wrap-nonexclusive)
  (advice-add #'eglot-completion-at-point :around #'cape-wrap-nonexclusive)
  (advice-add #'pcomplete-completions-at-point :around #'cape-wrap-nonexclusive)
  )
(elpaca-wait)
#+end_src
** Orderless 
:PROPERTIES:
:CUSTOM_ID: orderless
:END:
#+begin_src emacs-lisp

(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** Marginalia 
:PROPERTIES:
:CUSTOM_ID: marginalia
:END:
#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src

#+RESULTS:
: [nil 26333 27716 331036 nil elpaca-process-queues nil nil 713000 nil]

** Embark
:PROPERTIES:
:CUSTOM_ID: embark
:END:
#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-;" . embark-act)
   ("M-." . embark-dwim)
   ("C-h B" . embark-bindings))

  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; (leader-key
  ;;   "T" '(embark-act :wk "Embark"))
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package avy-embark-collect
  :after (embark avy))

(use-package embark-consult
  ;; :after '(em
  :hook
  (embark-collect-mode . consult-preview-at-point-mode)
  )
#+end_src

#+RESULTS:

** Consult 
:PROPERTIES:
:CUSTOM_ID: consult
:END:
#+begin_src emacs-lisp
(use-package consult
  :custom
  (xref-show-definitions-functions #'consult-xref)
  :config
  (recentf-mode)
  )
(elpaca-wait)

(use-package consult-dir
  :after consult
  :bind
  (:map vertico-map
        ("C-x C-d" . consult-dir)
        ("C-x C-j" . consult-dir-jump-file)))

(use-package consult-flycheck
  :after (consult flycheck))


(use-package consult-projectile)
(use-package consult-recoll
  :config
  (leader-key
    "sr" '(consult-recoll :wk "Documents")))
#+end_src

** Yasnippet 
:PROPERTIES:
:CUSTOM_ID: yasnippet
:END:
#+begin_src emacs-lisp
(use-package yasnippet
  :defer 4
  :no-require t
  :config
  (yas-global-mode 1)
  )
(use-package yasnippet-snippets
  :defer 5
  :no-require t)

(use-package consult-yasnippet
  :defer 5
  :no-require t
  :after yasnippet
  :after consult)
#+end_src
* Drag-stuff
:PROPERTIES:
:CUSTOM_ID: drag-stuff
:END:
* Casual
:PROPERTIES:
:CUSTOM_ID: casual
:END:
#+begin_src emacs-lisp
(use-package casual ;; A collection of  user interfaces for various built-in Emacs modes.
  :defer 2
  :custom
  (casual-lib-use-unicode t)
  (casual-dired-use-unicode-symbols t)
  :general
  (:states 'normal :keymaps 'org-agenda-mode-map "C-o" 'casual-agenda-tmenu)
  (:states 'normal :keymaps 'bookmark-bmenu-mode-map "C-o" 'casual-bookmarks-tmenu)
  (:states 'normal :keymaps 'calendar-mode-map "C-o" 'casual-calendar-tmenu)
  (:states 'normal :keymaps 'ibuffer-mode-map "C-o" 'casual-ibuffer-tmenu)
  (:states 'normal :keymaps 'calc-mode-map "C-o" 'casual-calc-tmenu)
  (:states 'normal :keymaps 'dired-mode-map "C-o" 'casual-dired-tmenu)
  (:states 'normal :keymaps 'dired-mode-map "s" 'casual-dired-sort-by-tmenu)
  (:states 'normal :keymaps 'image-mode-map "C-o" 'casual-image-tmenu)
  (:states 'normal :keymaps 'Info-mode-map "C-o" 'casual-info-tmenu)
  (:states 'normal :keymaps 'Man-mode-map "C-o" 'casual-man-tmenu)
  (:states 'normal :keymaps 'help-mode-map "C-o" 'casual-help-tmenu)
  :init
  (require 'casual-image)
  ;; :config
  ;; (transient-append suffix )
  )

(use-package casual-avy
  :defer 2
  :custom
  (avy-ignored-modes
   '(image-mode doc-view-mode pdf-view-mode exwm-mode))
  :general
  (:states 'normal "SPC j" 'casual-avy-tmenu))
#+end_src

#+RESULTS:
: [nil 26464 9225 305972 nil elpaca-process-queues nil nil 523000 nil]

* SUDO EDIT 
:PROPERTIES:
:CUSTOM_ID: sudo-edit
:END:
#+begin_src emacs-lisp
(use-package sudo-edit
  :defer 4
  :config
  (leader-key
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file"))
  )
(elpaca-wait)
#+end_src
* PDF-Tools
:PROPERTIES:
:CUSTOM_ID: pdf-tools
:END:
#+begin_src emacs-lisp
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :hook (pdf-view-mode . pdf-view-fit-page-to-window)
  :defer 1
  :config
  (pdf-tools-install)  ; Standard activation command
  (pdf-loader-install) ; On demand loading, leads to faster startup time
  )
(use-package saveplace-pdf-view
  :config
  (save-place-mode 1))
#+end_src
* Nov-mode
:PROPERTIES:
:CUSTOM_ID: nov-mode
:END:
#+begin_src emacs-lisp
(use-package nov
  :ensure t
  :mode ("\\.epub\\'" . nov-mode) 
  )
;; (use-package nov-xwidget
;;   :ensure (:host github :repo "chenyanming/nov-xwidget"
;; 		 :files (:defaults "*.el"))
;;   :demand t
;;   :after nov
;;   :config
;;   (define-key nov-mode-map (kbd "o") 'nov-xwidget-view)
;;   (add-hook 'nov-mode-hook 'nov-xwidget-inject-all-files))
#+end_src
* Djvu
:PROPERTIES:
:CUSTOM_ID: djvu
:END:
#+begin_src emacs-lisp
(use-package djvu)
(use-package djvu3
  ;; :defer 2
  :after djvu
  :ensure (djvu3 :type git :host github :repo "dalanicolai/djvu3" :files ("djvu3.el")))
#+end_src

#+RESULTS:
: [nil 26327 26259 966804 nil elpaca-process-queues nil nil 85000 nil]
* FB2
:PROPERTIES:
:CUSTOM_ID: fb2
:END:
#+begin_src emacs-lisp
(use-package fb2-reader
  :mode ("\\.fb2\\(\\.zip\\)?\\'" . fb2-reader-mode)
  :commands (fb2-reader-continue)
  :custom
  ;; This mode renders book with fixed width, adjust to your preferences.
  (fb2-reader-page-width 120)
  (fb2-reader-image-max-width 400)
  (fb2-reader-image-max-height 400))
#+end_src
* Imenu 
:PROPERTIES:
:CUSTOM_ID: imenu
:END:
** Imenu-List 
:PROPERTIES:
:CUSTOM_ID: imenu-list
:END:
#+begin_src emacs-lisp
(use-package imenu-list
  :custom
  (imenu-list-focus-after-activation t)
  (imenu-list-auto-resize t)
  (imenu-list-size 0.3)
  (org-imenu-depth 10)
  (imenu-list-focus-after-activation t)                                    ; Переключение на активированный imenu-list
  :config

  (leader-key
    "s RET" '(imenu-list-smart-toggle :wk "Toggle imenu-list")
    ) 
  )
#+end_src 
* IBuffer 
:PROPERTIES:
:CUSTOM_ID: ibuffer
:END:
** Nerd-Icons-IBuffer
:PROPERTIES:
:CUSTOM_ID: nerd-icons-ibuffer
:END:
#+begin_src emacs-lisp
(use-package nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

* Jinx
:PROPERTIES:
:CUSTOM_ID: jinx
:END:
#+begin_src emacs-lisp
(use-package jinx
  :custom
  (jinx-languages "ru_RU en_US")
  (global-jinx-modes '(text-mode))
  :hook ((text-mode ) . jinx-mode )
  )
#+end_src

* Markdown-Mode
:PROPERTIES:
:CUSTOM_ID: markdown-mode
:END:
#+begin_src emacs-lisp
(use-package markdown-ts-mode
  :mode ("README\\.md\\'" . gfm-mode))
(use-package markdown-soma)
#+end_src
* Guix
:PROPERTIES:
:CUSTOM_ID: guix
:END:
#+begin_src emacs-lisp
(use-package guix)
#+end_src

* Leetcode
:PROPERTIES:
:CUSTOM_ID: leetcode
:END:
#+begin_src emacs-lisp
(use-package leetcode
  :defer 5
  :custom
  (leetcode-prefer-language "python3")
  (leetcode-prefer-sql "mysql")
  (leetcode-save-solutions t)
  :hook (leetcode-solution-mode lsp-deferred))
#+end_src

* Disk-Usage
:PROPERTIES:
:CUSTOM_ID: disk-usage
:END:
#+begin_src emacs-lisp
(use-package disk-usage)
#+end_src

* Daemons
:PROPERTIES:
:CUSTOM_ID: daemons
:END:
#+begin_src emacs-lisp
(use-package daemons)
#+end_src

* Command-log-mode
:PROPERTIES:
:CUSTOM_ID: command-log-mode
:END:
#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src

* Trashed
:PROPERTIES:
:CUSTOM_ID: trashed
:END:
#+begin_src emacs-lisp
(use-package trashed
  :commands (trashed))
#+end_src

#+RESULTS:
: [nil 26446 47162 87282 nil elpaca-process-queues nil nil 918000 nil]

* Screenshot
:PROPERTIES:
:CUSTOM_ID: screenshot
:END:
#+begin_src emacs-lisp
(use-package screenshot
  :ensure (screenshot :type git :host github :repo "tecosaur/screenshot" :build (:not compile))
  :if (display-graphic-p)
  :commands (screenshot)
  :init
  (leader-key "S" 'screenshot))
#+end_src

#+RESULTS:
: [nil 26456 23223 773106 nil elpaca-process-queues nil nil 923000 nil]

* Gnuplot
:PROPERTIES:
:CUSTOM_ID: gnuplot
:END:
#+begin_src emacs-lisp
(use-package gnuplot
  :config
  (general-define-key
   :states '(normal)
   :keymaps 'gnuplot-mode-map
   "RET" #'gnuplot-send-buffer-to-gnuplot))
#+end_src

* Colorful
:PROPERTIES:
:CUSTOM_ID: colorful
:END:
#+begin_src emacs-lisp
(use-package colorful-mode
  :hook (prog-mode text-mode))
#+end_src

* Grip
:PROPERTIES:
:CUSTOM_ID: grip
:END:
#+begin_src emacs-lisp
(use-package grip-mode)
#+end_src

* Quick-Sdcv
:PROPERTIES:
:CUSTOM_ID: quick-sdcv
:END:
#+begin_src emacs-lisp
(use-package quick-sdcv
  :init
  (leader-key
    "sw" '(quick-sdcv-search-at-point :wk "Search word at point")
    "sW" '(quick-sdcv-search-input :wk "Search word at input"))
  :config
  (add-hook 'markdown-mode-hook
          #'(lambda()
              (setq-local evil-lookup-func #'quick-sdcv-search-at-point)))
  (add-hook 'quick-sdcv-mode-hook
          #'(lambda()
              (setq-local evil-lookup-func #'quick-sdcv-search-at-point))))
#+end_src

#+RESULTS:
: [nil 26508 43412 335088 nil elpaca-process-queues nil nil 32000 nil]

* Auto-Dim-Other-Buffer
:PROPERTIES:
:CUSTOM_ID: auto-dim-other-buffer
:END:
#+begin_src emacs-lisp
(use-package auto-dim-other-buffers
  :config
  (auto-dim-other-buffers-mode t)
  (custom-set-faces '(auto-dim-other-buffers ((t (:background "black"))))))
#+end_src

* Systemd
:PROPERTIES:
:CUSTOM_ID: systemd
:END:
#+begin_src emacs-lisp
(use-package systemd)
#+end_src

* Emojify
:PROPERTIES:
:CUSTOM_ID: emojify
:END:
#+begin_src emacs-lisp
(use-package emojify
  :defer 2
  :init
  ;; (add-hook 'after-init-hook #'global-emojify-mode)
  )
#+end_src

#+RESULTS:
: [nil 26663 26692 614433 nil elpaca-process-queues nil nil 142000 nil]

* Bufferfile
:PROPERTIES:
:CUSTOM_ID: bufferfile
:END:
#+begin_src emacs-lisp
(use-package bufferfile
  :config
  (leader-key
    "ff"  '(:ignore t :wk "Current bufferfile")
    "ffs" '(save-buffer :wk "Save")
    "ffc" '(bufferfile-copy :wk "Copy")
    "ffr" '(bufferfile-rename :wk "Rename")
    "ffd" '(bufferfile-delete :wk "Delete")))
#+end_src

#+RESULTS:
: [nil 26739 43080 518873 nil elpaca-process-queues nil nil 643000 nil]

* Provide
:PROPERTIES:
:CUSTOM_ID: provide
:END:
#+begin_src emacs-lisp
(provide 'other)
#+end_src
