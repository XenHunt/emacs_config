#+TITLE:XenHunt Config (AI)
#+AUTHOR: Evgeny Berlizov (XenHunt)
#+DESCRIPTION: XenHunt's config of AI feautures
#+STARTUP: content
#+PROPERTY: header-args :tangle ai.el
* Содержание
:PROPERTIES:
:TOC:      :include all :depth 100 :force (nothing) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#введение][Введение]]
- [[#fast-loading][Fast-Loading]]
- [[#ellama][Ellama]]
- [[#gptel][Gptel]]
- [[#elysium][Elysium]]
- [[#codeium][Codeium]]
- [[#consult-omni][Consult-Omni]]
- [[#provide][Provide]]
:END:
* Введение
:PROPERTIES:
:CUSTOM_ID: введение
:END:

Эта часть посвященна добавлению силы ИИ в мой =Emacs=.

* Fast-Loading
:PROPERTIES:
:CUSTOM_ID: fast-loading
:END:

Быстрая загрузка модуля.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

* Ellama
:PROPERTIES:
:CUSTOM_ID: ellama
:END:
#+begin_src emacs-lisp
(use-package ellama
  :custom
  (ellama-keymap-prefix "C-l")
  (ellama-auto-scroll t)
  :config
  ;; setup key bindings
  ;; (evil-make-overriding-map ellama-keymap)
  ;; (general-auto-unbind-keys)
  ;; (leader-key
  ;;   "l" '(:ignore t :wk "Ellama"))
  (general-define-key
   ;; :states 'normal
   :keymaps 'ellama-keymap
   :prefix ellama-keymap-prefix
   "a" '(:ignore t :wk "Ask Ellama")
   "c" '(:ignore t :wk "Code")
   "d" '(:ignore t :wk "Define")
   "i" '(:ignore t :wk "Improve")
   "m" '(:ignore t :wk "Make")
   "p" '(:ignore t :wk "Provider")
   "s" '(:ignore t :wk "Session")
   "t" '(:ignore t :wk "Translate")
   "x" '(:ignore t :wk "Context"))
  ;; (setopt ellama-keymap-prefix "SPC l")
  ;; language you want ellama to translate to
  (setopt ellama-language "Russian")
  ;; could be llm-openai for example
  (require 'llm-ollama)
  (setopt ellama-provider
	  (make-llm-ollama
	   ;; this model should be pulled to use it
	   ;; value should be the same as you print in terminal during pull
	   :chat-model "llama3.1:8b"
	   ;; :chat-model "llama3:8b"
	   :embedding-model "nomic-embed-text"
	   :default-chat-non-standard-params '(("num_ctx" . 8192))))
  ;; Predefined llm providers for interactive switching.
  ;; You shouldn't add ollama providers here - it can be selected interactively
  ;; without it. It is just example.
  (setopt ellama-providers
	  '(("llama3.1" . ellama-provider)
            ("deepseek-coder" . (make-llm-ollama
				 :chat-model "deepseek-coder-v2:16b"
				 :embedding-model "deepseek-coder-v2:16b"))))
  ;; Naming new sessions with llm
  (setopt ellama-naming-provider
	  (make-llm-ollama
	   :chat-model "llama3.1:8b"
	   :embedding-model "nomic-embed-text"
	   :default-chat-non-standard-params '(("stop" . ("\n")))))
  (setopt ellama-naming-scheme 'ellama-generate-name-by-llm)
  ;; Translation llm provider
  (setopt ellama-translation-provider (make-llm-ollama
        			       :chat-model "qwen2.5:3b"
        			       :embedding-model "qwen2.5:3b"))
  )
#+end_src

#+RESULTS:
: [nil 26361 22367 950126 nil elpaca-process-queues nil nil 887000 nil]

* Gptel
:PROPERTIES:
:CUSTOM_ID: gptel
:END:
#+begin_src emacs-lisp
(use-package gptel
  :config

  (setq
   gptel-model "deepseek-coder-v2:16b"
   gptel-default-mode #'org-mode
   gptel-backend (gptel-make-ollama "Ollama"
                   :host "localhost:11434"
                   :stream t
                   :models '("llama3.1:8b" "deepseek-coder-v2:16b")))
  (add-to-list 'gptel-directives '(clojure-teacher . "You are a professional programmer-teacher in Clojure. Your task is to write best code with good explaination, answer a questions about the Clojure, do everything to help me master Cloure. Respond concisely."))
  (add-to-list 'gptel-directives '(org-helper . "You are a helper in writing declartive config for Emacs in Org files. Your task is to describe parts of the config with all your master and writes it. Respond concisely."))
  (leader-key
    "e" '(:ignore t :wk "Gptel")
    "e e" '(gptel :wk "Start/Switch")
    "e c" '(gptel-add :wk "Add/Remove regions of buffers from context")
    "e f" '(gptel-add-file :wk "Add file")
    "e m" '(gptel-menu :wk "Confuguration menu")
    "e s" '(gptel-send :wk "Send")
    "e a" '(gptel-abort :wk "Abort")))

#+end_src

#+RESULTS:
: [nil 26334 63911 452257 nil elpaca-process-queues nil nil 756000 nil]

* Elysium
:PROPERTIES:
:CUSTOM_ID: elysium
:END:
#+begin_src emacs-lisp
(use-package elysium
  :ensure (:host github :repo "lanceberge/elysium")
  :custom
  ;; Below are the default values
  (elysium-window-size 0.33) ; The elysium buffer will be 1/3 your screen
  (elysium-window-style 'vertical))
(use-package smerge-mode
  :ensure nil
  :hook
  (prog-mode . smerge-mode))
#+end_src
* Codeium 
:PROPERTIES:
:CUSTOM_ID: codeium
:END:
#+begin_src emacs-lisp
(use-package codeium
  :ensure (codeium :host github :repo "Exafunction/codeium.el")

  ;; if you use straight
  ;; :straight '(:type git :host github :repo "Exafunction/codeium.el")
  ;; otherwise, make sure that the codeium.el file is on load-path

  :init
  ;; use globally
  ;; (add-to-list 'completion-at-point-functions 'codeium-completion-at-point) ;; ПОЧЕМУ-ТО не работает нормально
  ;; or on a hook
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local completion-at-point-functions '(codeium-completion-at-point))))

  ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local completion-at-point-functions
  ;;             (list (cape-super-capf #'codeium-completion-at-point #'lsp-completion-at-point)))))
  ;; an async company-backend is coming soon!

  ;; codeium-completion-at-point is autoloaded, but you can
  ;; optionally set a timer, which might speed up things as the
  ;; codeium local language server takes ~0.2s to start up
  (add-hook 'emacs-startup-hook
            (lambda () (run-with-timer 0.4 nil #'codeium-init)))

  ;; :defer t ;; lazy loading, if you want
  :config
  ;;(setq use-dialog-box nil) ;; do not use popup boxes

  ;; if you don't want to use customize to save the api-key
  ;; (setq codeium/metadata/api_key "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")

  ;; get codeium status in the modeline
  ;;(setq codeium-mode-line-enable
  ;;      (lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
  ;;(add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)
  ;; alternatively for a more extensive mode-line
  (add-to-list 'mode-line-format '(-50 "" codeium-mode-line) t)

  ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
  (setq codeium-api-enabled
	(lambda (api)
          (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))
  ;; you can also set a config for a single buffer like this:
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local codeium/editor_options/tab_size 4)))

  ;; You can overwrite all the codeium configs!
  ;; for example, we recommend limiting the string sent to codeium for better performance
  (defun my-codeium/document/text ()
    (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))
  ;; if you change the text, you should also change the cursor_offset
  ;; warning: this is measured by UTF-8 encoded bytes
  (defun my-codeium/document/cursor_offset ()
    (codeium-utf8-byte-length
     (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
  (setq codeium/document/text 'my-codeium/document/text)
  (setq codeium/document/cursor_offset 'my-codeium/document/cursor_offset))

(defun my/complete-codeium ()
  "Manual codeium running"
  (interactive)
  (when (not (member 'codeium-completion-at-point completion-at-point-functions))
    (setq capb completion-at-point-functions) ; Резервируем в переменную capb текущее состояние
    (setq completion-at-point-functions '(codeium-completion-at-point t)) ; Подключаем Codeium
    (call-interactively 'corfu-complete) ; Вызываем Company
    (setq completion-at-point-functions capb)
    (kill-local-variable 'capb))) ; Возвращаем все на свои места

(defun my/strict-complete-codeium ()
  "Manual codeium running, but works even when auto completion is on"
  (interactive)
  (setq capb completion-at-point-functions) ; Резервируем в переменную capb текущее состояние
  (setq completion-at-point-functions '(codeium-completion-at-point t)) ; Подключаем Codeium
  (call-interactively 'corfu-complete) ; Вызываем Company
  (setq completion-at-point-functions capb)
  (kill-local-variable 'capb)) ; Возвращаем все на свои места

(defun my/toggle-codeium ()
  "Manually toggle codeium auto completion"
  (interactive)
  (if (member 'codeium-completion-at-point completion-at-point-functions)
      (progn
	(setq completion-at-point-functions (delq 'codeium-completion-at-point completion-at-point-functions))
	(message "Codeium auto complete off"))
    (add-to-list 'completion-at-point-functions 'codeium-completion-at-point)
    (message "Codeium auto complete on")))
#+end_src
* Consult-Omni
:PROPERTIES:
:CUSTOM_ID: consult-omni
:END:
#+begin_src emacs-lisp
(use-package consult-omni
  :ensure (consult-omni :type git :host github :repo "armindarvish/consult-omni" :branch "main" :files (:defaults "sources/*.el"))
  :after consult
  :config
  ;; Load Sources Core code
  (require 'consult-omni-sources)
  ;; Load Embark Actions
  (require 'consult-omni-embark)
  ;; Only load brave-auto-suggest source
  ;; (require 'consult-omni-gptel)
  ;; (require 'consult-omni-elfeed)
  ;; (require 'consult-omni-apps)
  ;; (require 'consult-omni-fd)
  (setq consult-omni-sources-modules-to-load '(consult-omni-gptel consult-omni-apps consult-omni-fd consult-omni-elfeed ))
  (consult-omni-sources-load-modules)
  ;; (setq consult-omni-multi-sources-apps-launcher '("Apps"))
  (setq consult-omni-multi-sources '("Apps"
                                     "elfeed"
                                     "gptel"
                                     "fd"))

  (setq consult-omni-embark-default-term #'vterm)
  (setq consult-omni-show-preview t)
  
  ;;; Set your shorthand favorite interactive command
  (setq consult-omni-default-interactive-command #'consult-omni-apps))
#+end_src

#+RESULTS:
: [nil 26280 40971 7852 nil elpaca-process-queues nil nil 858000 nil]

* Provide
:PROPERTIES:
:CUSTOM_ID: provide
:END:
#+begin_src emacs-lisp
(provide 'ai)
#+end_src
