#+TITLE:XenHunt Config (AI)
#+AUTHOR: Evgeny Berlizov (XenHunt)
#+DESCRIPTION: XenHunt's config of AI feautures
#+STARTUP: content
#+PROPERTY: header-args :tangle ai.el
* Содержание
:PROPERTIES:
:TOC:      :include all :depth 100 :force (nothing) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#введение][Введение]]
- [[#fast-loading][Fast-Loading]]
- [[#gptel][Gptel]]
  - [[#gptel-itself][Gptel Itself]]
  - [[#magit-gptcommit][Magit-GPTCommit]]
  - [[#elysium][Elysium]]
  - [[#evedel][Evedel]]
  - [[#corsair][Corsair]]
- [[#codeium][Codeium]]
- [[#consult-omni][Consult-Omni]]
- [[#chatgpt-shell][Chatgpt-Shell]]
- [[#ob-chatgpt-shell][Ob-Chatgpt-Shell]]
- [[#aidermacs][Aidermacs]]
- [[#provide][Provide]]
:END:
* Введение
:PROPERTIES:
:CUSTOM_ID: введение
:END:

Эта часть посвящена добавлению силы ИИ в мой =Emacs=.

* Fast-Loading
:PROPERTIES:
:CUSTOM_ID: fast-loading
:END:

Быстрая загрузка модуля.

#+begin_src emacs-lisp
;; -*- lexical-binding: t;  no-byte-compile: t -*-
#+end_src

* Gptel
:PROPERTIES:
:CUSTOM_ID: gptel
:END:
** Gptel Itself
:PROPERTIES:
:CUSTOM_ID: gptel-itself
:END:
#+begin_src emacs-lisp
(use-package gptel
  :defer 4
  :custom
  (gptel-model 'qwen2.5-coder:14b)
  (gptel-default-mode #'org-mode)
  :config

  (setq
   ;; gptel-model 'deepseek-coder-v2:16b
   ;; gptel-default-mode #'org-mode
   gptel-backend (gptel-make-ollama "Ollama"
                   :host "localhost:11434"
                   :stream t
                   :models '(llama3.1:8b deepseek-coder-v2:16b qwen2.5:3b qwen2.5-coder:14b qwen2.5-coder:32b deepseek-r1)))
  ;; (add-to-list 'gptel-directives '(clojure-teacher . "You are a professional programmer-teacher in Clojure. Your task is to write best code with good explaination, answer a questions about the Clojure, do everything to help me master Cloure. Respond concisely."))
  ;; (add-to-list 'gptel-directives '(org-helper . "You are a helper in writing declartive config for Emacs in Org files. Your task is to describe parts of the config with all your master and writes it. Respond concisely."))
  ;; (add-to-list 'gptel-di)
  (let ((directives '((clojure-teacher . "Task: You are a Clojure AI Teacher whose task is to guide and educate the user on learning Clojure programming language, providing comprehensive explanations, examples, and step-by-step guidance through various topics including but not limited to basic syntax, functional programming concepts, data structures, higher-order functions, and more.

Your goal is to help users understand complex concepts in a simplified manner, answering questions, addressing doubts, and ensuring the user has a smooth learning experience in Clojure.")
                      (vue-teacher . "You are a Vue AI Teacher whose task is to teach me with all Vue essential components. You must give comprehensive explanations, examples and be best helpful AI companion")
		      (code-commentary-generator . "You are a programming commentator. Generate commentaries for provided code blocks in various programming languages. Each commentary should:

- Be concise (max 2-3 sentences)
- Focus on the core functionality and logic of the code
- Use precise language to avoid ambiguity or confusion
- Consider language-specific features and idioms when applicable

Provide clear explanations for:

- Loops (e.g., while loops, for loops) that highlight iteration logic and termination conditions
- Conditional statements (e.g., if-else statements) that clarify branching logic and evaluation criteria
- Functions or methods that detail input parameters, return values, and any notable complexities

Use a neutral tone and avoid overly technical jargon. Ensure commentaries are self-contained and do not require additional context to understand.")
		      (explainer . "Task: Your role is to meticulously analyze and break down complex code snippets provided by users. To ensure accuracy and effectiveness in your explanations, follow these guidelines:
1. *Precision*: Clearly delineate each segment of the code, distinguishing between different functions, variables, or loops as needed.
2. *Consistency*: Adhere to a consistent structure for all explanations to maintain clarity and ease of understanding. This includes using clear headings and bullet points when necessary.
3. *Detailed Explanation*: Provide an in-depth explanation that not only covers the functionality but also contextualizes the code within its broader programming environment or project context.
4. *Engage with Technical Terminology*: Utilize appropriate technical jargon to convey a comprehensive understanding of the code, ensuring users without extensive coding experience can follow your explanations.
5. *Clarity and Brevity*: Balance complexity with simplicity, aiming to explain as much as possible while keeping explanations accessible to a wide audience.
6. *User-Centric Approach*: Always consider the user's level of programming expertise when crafting your explanation; adjust difficulty levels accordingly.
7. *Feedback Integration*: Incorporate feedback from users into future explanations for continuous improvement and better meet their learning needs.
8. *Attention to Detail*: Ensure that all parts of the code are accounted for in the explanation, including data structures, algorithms, and any dependencies or external factors affecting functionality.
9. *Engage with Visual Aids if Appropriate*: Use diagrams or flowcharts where appropriate to visually represent processes within the codebase, aiding understanding and retention.
10. *Review and Revise*: Regularly review explanations for effectiveness and make revisions as necessary to enhance clarity and accuracy over time.")
                      (org-helper . "You are a helper in writing declartive config for Emacs in Org files. Your task is to describe parts of the config with all your master and writes it. Respond concisely.")
                      (translater . "Task: Translate a given text from English to Russian, preserving its original meaning and context while using proper grammar and spelling in the target language.

Example texts may include short paragraphs, sentences, or even single words. Be mindful of idioms, colloquial expressions, and cultural nuances that might not have direct translations.

,*Priority considerations:*

- Accuracy in translating the source text
- Natural flow and readability in Russian translation
- Consistency in terminology and vocabulary usage

Assume a general audience familiar with basic English and willing to understand complex sentences. Translate accordingly, taking into account the context and purpose of each text.")
                      (reteller . "You are a reteller. Your task is to succinctly reduce lengthy texts by eliminating non-essential details, abstract concepts, or unnecessary language without sacrificing the core message, tone, or intent of the original text.

,*Key Performance Indicators (KPIs) for Success:*

1. *Meaning preservation*: Retain the essential ideas, themes, and insights from the original text.
2. *Readability enhancement*: Ensure the rewritten summary is clear, concise, and easy to understand.
3. *Length reduction*: Achieve a substantial decrease in text length without compromising its core message.
4. *Clarity and coherence*: Maintain logical flow and proper sentence structure throughout the rewritten text.

,*Guidelines for Refining the Reteller Directive:*

1. Use active voice and present-tense language to enhance readability.
2. Avoid redundancy by condensing ideas, eliminating repetitive phrases or sentences.
3. Preserve key terminology and concepts relevant to the original context.
4. Ensure consistency in style, tone, and format with the original text.

,*Tips for Improving AI Performance:*

1. Provide context-specific training data for the Reteller model to adapt to diverse genres, styles, and domains.
2. Develop a robust evaluation framework that incorporates KPIs mentioned above.
3. Regularly fine-tune the model using feedback from human evaluators and quality control processes.

By refining the prompt in this manner, we've clarified the expectations for the AI's performance as a Reteller and provided actionable guidelines to improve its efficiency and effectiveness.")
                      (gptel-directive-writer . "Task: You are a specialized assistant tasked with refining the prompts for GPTel directives. Your goal is to enhance the clarity and specificity of these prompts so that AI can perform more efficiently in fulfilling the tasks associated with each directive.

Guidelines:
1. Receive a name and task description for a specific GPTel directive.
2. Review and analyze the current prompt format.
3. Refine the task by adding detailed instructions or clarifications.
4. Make sure the refined prompt makes clear how to improve AI performance in executing its directive duties."))))
    (mapc (lambda (x) (add-hook 'gptel-directives x)) directives))
  (leader-key
    "e g" '(:ignore t :wk "Gptel")
    "e gg" '(gptel :wk "Start/Switch")
    "e gc" '(gptel-add :wk "Add/Remove regions of buffers from context")
    "e gf" '(gptel-add-file :wk "Add file")
    "e gm" '(gptel-menu :wk "Confuguration menu")
    "e gs" '(gptel-send :wk "Send")
    "e ga" '(gptel-abort :wk "Abort")))

#+end_src

#+RESULTS:
: [nil 26403 13421 488387 nil elpaca-process-queues nil nil 716000 nil]

** Magit-GPTCommit
:PROPERTIES:
:CUSTOM_ID: magit-gptcommit
:END:
#+begin_src emacs-lisp
(use-package magit-gptcommit
  :ensure (magit-gptcommit
           :type git
           :host github
           :branch "gptel"
           :repo "douo/magit-gptcommit"
           :files ("*.el" "*.el.in" "dir" "*.info"
                   "*.texi" "*.texinfo" "doc/dir"
                   "doc/*.info" "doc/*.texi"
                   "doc/*.texinfo" "lisp/*.el" "docs/dir"
                   "docs/*.info" "docs/*.texi"
                   "docs/*.texinfo" (:exclude
                                     ".dir-locals.el" "test.el" "tests.el"
                                     "*-test.el" "*-tests.el" "LICENSE"
                                     "README*" "*-pkg.el")))
  :after gptel magit
  :config

  ;; Enable magit-gptcommit-mode to watch staged changes and generate commit message automatically in magit status buffer
  ;; This mode is optional, you can also use `magit-gptcommit-generate' to generate commit message manually
  ;; `magit-gptcommit-generate' should only execute on magit status buffer currently
  ;; (magit-gptcommit-mode 1)

  ;; Add gptcommit transient commands to `magit-commit'
  ;; Eval (transient-remove-suffix 'magit-commit '(1 -1)) to remove gptcommit transient commands
  (magit-gptcommit-status-buffer-setup)
  :bind (:map git-commit-mode-map
              ("C-c C-g" . magit-gptcommit-commit-accept))
  )
#+end_src
** Elysium
:PROPERTIES:
:CUSTOM_ID: elysium
:END:
#+begin_src emacs-lisp
(use-package elysium
  :ensure (:host github :repo "lanceberge/elysium")
  :after gptel
  ;; :bind
  :custom
  ;; Below are the default values
  (elysium-window-size 0.33) ; The elysium buffer will be 1/3 your screen
  (elysium-window-style 'vertical)
  :config
  (leader-key
    "ee" '(:ignore t :wk "Elysium")
    "e ee" '(elysium-query :wk "Query")
    "e et" '(elysium-toggle-window :wk "Toggle window")))
(use-package smerge-mode
  :ensure nil
  :hook
  (prog-mode . smerge-mode)
  :config
  (leader-key
    "e eu" '(smerge-keep-upper :wk "Kepp upper")
    "e el" '(smerge-keep-lower :wk "Keep lower")
    "e ec" '(smerge-keep-current :wk "Keep current")))
#+end_src
** Evedel
:PROPERTIES:
:CUSTOM_ID: evedel
:END:
#+begin_src emacs-lisp
(use-package evedel
  ;; :ensure (evedel :host github :repo "daedsidog/evedel" :branch "master" :files ("*.el"))
  :defer 1
  :init
  
  (transient-define-prefix evedel-tmenu--directive ()
    "Transient menu for directive"
    [["Create/Modify"
      ("c" "Create directive" evedel-create-directive
       :transient nil)
      ("m" "Modify" evedel-modify-directive :transient t)
      ("M" "Modify tag query" evedel-modify-directive-tag-query :transient t)]

     ["Navigation"
      ("n" "Next Directive" evedel-next-directive :transient t)
      ("p" "Previous Directive" evedel-previous-directive :transient t)]]
    [:class transient-row
            (casual-lib-quit-one)])

  (transient-define-prefix evedel-tmenu--references ()
    "Transient menu for references"
    [["Create/Modify"
      ("c" "Create" evedel-create-reference
       :transient nil)
      ("m" "Modify" evedel-modify-reference-commentary :transient t)]

     ["Navigation"
      ("n" "Next Reference" evedel-next-reference :transient t)
      ("p" "Previous Reference" evedel-previous-reference :transient t)]]
    [:class transient-row
            (casual-lib-quit-one)])
  
  (transient-define-prefix evedel-tmenu ()
    "Transient menu for Evedel"
    [["Objects"
      ("d" "Directive>" evedel-tmenu--directive :transient nil)
      ("r" "References>" evedel-tmenu--references :transient nil)
      ("p" "Process" evedel-process-directives :transient t)
      ("P" "Preview" evedel-preview-directive-prompt :transient nil)
      ("s" "Convert one to another" evedel-convert-instructions :transient t) 
      ("D" "Delete instruction" evedel-delete-instructions :transient t)
      ]
     ["Navigation"
      ("j" "Next Instruction" evedel-next-instruction :transient t)
      ("k" "Previous Instruction" evedel-previous-instruction :transient t)]
     ["Tags"
      ("t" "Add tag" evedel-add-tags :transient t)
      ("T" "Remove tag" evedel-remove-tags :transient t)]
     ]
    [["Save/Load"
      ("S" "Save instructions" evedel-save-instructions :transient nil)
      ("L" "Load instructions" evedel-load-instructions :transient t)]]
    [:class transient-row
            (casual-lib-quit-one)
            ("C-d" "Delete all instructions" evedel-delete-all-instructions
             :transient nil
             :if (lambda() (< 0 (evedel-instruction-count))))])
  :config

  (let ((roles '((python-ts-mode . "a Python programmer")
                 (python-mode . "a Python programmer")
                 (web-mode . "Web developer")
                 (clojure-mode . "a Clojure programmer")
                 (clojure-ts-mode . "a Clojure programmer")
                 (vue-mode . "a Vue programmer")
                 (vue-ts-mode . "a Vue programmer")
                 (typescript-mode . "a Typescript programmer")
                 (typescript-ts-mode . "a Typescript programmer"))))
    (mapc (lambda (x) (add-to-list 'evedel-descriptive-mode-roles x)) roles))
  
  (general-define-key
   ;; :definer 'minor-mode
   :states '(normal visual)
   :keymaps '(global-map)
   :prefix "C-e"
   "" '(evedel-tmenu :wk "Evedel")
   ))
#+end_src

#+RESULTS:
: [nil 26444 9329 31631 nil elpaca-process-queues nil nil 868000 nil]

** Corsair
:PROPERTIES:
:CUSTOM_ID: corsair
:END:
#+begin_src emacs-lisp
(use-package corsair
  :after gptel
  :config
  (leader-key
    "e c" '(:ignore t :wk "Corsair")
    "e cn" '(corsair-accumulate-file-name :wk "This file name")
    "e cc" '(corsair-accumulate-file-path-and-contents :wk "Append file or folder")
    "e cC" '(corsair-accumulate-selected-text :wk "Selected text")
    "e cs" '(corsair-open-chat-buffer :wk "Switch/open to chat")
    "e ci" '(corsair-insert-file-or-folder-contents :wk "Insert file or folder")))
#+end_src

#+RESULTS:
: [nil 26403 11332 772728 nil elpaca-process-queues nil nil 982000 nil]

* Codeium 
:PROPERTIES:
:CUSTOM_ID: codeium
:END:
#+begin_src emacs-lisp
(use-package codeium
  :ensure (codeium :host github :repo "Exafunction/codeium.el")
  :defer 10
  ;; :custom
  ;; (setq codeium/metadata/api_key (auth-source-search
  ;; 				  :host "codeium"
  ;; 				  :user "api"
  ;; 				  :require '(:secret)
  ;; 				  :secret))

  ;; if you use straight
  ;; :straight '(:type git :host github :repo "Exafunction/codeium.el")
  ;; otherwise, make sure that the codeium.el file is on load-path

  :init
  ;; use globally
  ;; (add-to-list 'completion-at-point-functions 'codeium-completion-at-point) ;; ПОЧЕМУ-ТО не работает нормально
  ;; or on a hook
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local completion-at-point-functions '(codeium-completion-at-point))))

  ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local completion-at-point-functions
  ;;             (list (cape-super-capf #'codeium-completion-at-point #'lsp-completion-at-point)))))
  ;; an async company-backend is coming soon!

  ;; codeium-completion-at-point is autoloaded, but you can
  ;; optionally set a timer, which might speed up things as the
  ;; codeium local language server takes ~0.2s to start up

  ;; (add-hook 'emacs-startup-hook
  ;;           (lambda () (run-with-timer 0.4 nil #'codeium-init)))

  ;; :defer t ;; lazy loading, if you want
  :config
  ;;(setq use-dialog-box nil) ;; do not use popup boxes

  ;; if you don't want to use customize to save the api-key
  ;; (setq codeium/metadata/api_key "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")

  ;; get codeium status in the modeline
  ;;(setq codeium-mode-line-enable
  ;;      (lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
  ;;(add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)
  ;; alternatively for a more extensive mode-line
  (add-to-list 'mode-line-format '(-50 "" codeium-mode-line) t)

  ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
  (setq codeium-api-enabled
	(lambda (api)
          (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))
  ;; you can also set a config for a single buffer like this:
  ;; (add-hook 'python-mode-hook
  ;;     (lambda ()
  ;;         (setq-local codeium/editor_options/tab_size 4)))

  ;; You can overwrite all the codeium configs!
  ;; for example, we recommend limiting the string sent to codeium for better performance
  (defun my-codeium/document/text ()
    (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))
  ;; if you change the text, you should also change the cursor_offset
  ;; warning: this is measured by UTF-8 encoded bytes
  (defun my-codeium/document/cursor_offset ()
    (codeium-utf8-byte-length
     (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
  (setq codeium/document/text 'my-codeium/document/text)
  (setq codeium/document/cursor_offset 'my-codeium/document/cursor_offset))

(defun my/complete-codeium ()
  "Manual codeium running"
  (interactive)
  (when (not (member 'codeium-completion-at-point completion-at-point-functions))
    (setq capb completion-at-point-functions) ; Резервируем в переменную capb текущее состояние
    (setq completion-at-point-functions '(codeium-completion-at-point t)) ; Подключаем Codeium
    (call-interactively 'corfu-complete) ; Вызываем Company
    (setq completion-at-point-functions capb)
    (kill-local-variable 'capb))) ; Возвращаем все на свои места

(defun my/strict-complete-codeium ()
  "Manual codeium running, but works even when auto completion is on"
  (interactive)
  (setq capb completion-at-point-functions) ; Резервируем в переменную capb текущее состояние
  (setq completion-at-point-functions '(codeium-completion-at-point t)) ; Подключаем Codeium
  (call-interactively 'corfu-complete) ; Вызываем Company
  (setq completion-at-point-functions capb)
  (kill-local-variable 'capb)) ; Возвращаем все на свои места

(defun my/toggle-codeium ()
  "Manually toggle codeium auto completion"
  (interactive)
  (if (member 'codeium-completion-at-point completion-at-point-functions)
      (progn
	(setq completion-at-point-functions (delq 'codeium-completion-at-point completion-at-point-functions))
	(message "Codeium auto complete off"))
    (add-to-list 'completion-at-point-functions 'codeium-completion-at-point)
    (message "Codeium auto complete on")))
#+end_src
* Consult-Omni
:PROPERTIES:
:CUSTOM_ID: consult-omni
:END:
#+begin_src emacs-lisp
(use-package consult-omni
  :defer 1
  :ensure (consult-omni :type git :host github :repo "armindarvish/consult-omni" :branch "develop" :files (:defaults "sources/*.el"))
  :after consult
  :custom
  (consult-omni-gptel-model "llama3.1:8b")
  (consult-omni-show-preview t)
  (consult-omni-preview-key "C-o")
  :config
  ;; Load Sources Core code
  (require 'consult-omni-sources)
  ;; Load Embark Actions
  (require 'consult-omni-embark)
  ;; Only load brave-auto-suggest source
  ;; (require 'consult-omni-gptel)
  ;; (require 'consult-omni-elfeed)
  ;; (require 'consult-omni-apps)
  ;; (require 'consult-omni-fd)
  (setq consult-omni-sources-modules-to-load '(consult-omni-gptel
                                               consult-omni-apps
                                               consult-omni-fd consult-omni-elfeed
                                               consult-omni-ripgrep
                                               consult-omni-ripgrep-all
                                               consult-omni-git-grep))
  (consult-omni-sources-load-modules)
  ;; (setq consult-omni-multi-sources-apps-launcher '("Apps"))
  (setq consult-omni-multi-sources '("Apps"
                                     "elfeed"
                                     "gptel"
                                     "fd"))

  (setq consult-omni-embark-default-term #'vterm)
  ;; (setq consult-omni-show-preview t)
  
  ;;; Set your shorthand favorite interactive command
  (setq consult-omni-default-interactive-command #'consult-omni-apps))
#+end_src

#+RESULTS:
: [nil 26531 20782 325164 nil elpaca-process-queues nil nil 138000 nil]
* Chatgpt-Shell
:PROPERTIES:
:CUSTOM_ID: chatgpt-shell
:END:
#+begin_src emacs-lisp
(use-package chatgpt-shell
  ;; :defer 5
  :commands (chatgpt-shell)
  :init
  (defun remove-model-by-tag (tag name)
    "Remove a model from `chatgpt-shell-models` that matches the specified TAG and NAME.
TAG should be a string key in each model's assoc list, and NAME is the value associated with that tag."
    (setq chatgpt-shell-models
          (cl-delete-if (lambda (model)
                          (string= (assoc-default tag model) name))
                        chatgpt-shell-models)))
  :custom
  (chatgpt-shell-model-version "qwen2.5-coder:14b")
  :config
  (let ((filter-list '((:label "Ollama")
                       (:provider "Anthropic")
                       (:provider "Google")
                       (:provider "Kagi")
                       (:provider "Perplexity"))))
    (mapc (lambda (filter) (remove-model-by-tag (car filter)
                                                (cadr filter)))
          filter-list))
  (chatgpt-shell-ollama-load-models)
  )
#+end_src

#+RESULTS:

* Ob-Chatgpt-Shell
:PROPERTIES:
:CUSTOM_ID: ob-chatgpt-shell
:END:
#+begin_src emacs-lisp
(use-package ob-chatgpt-shell
  :defer t)
#+end_src

* Aidermacs
:PROPERTIES:
:CUSTOM_ID: aidermacs
:END:
#+begin_src emacs-lisp
(use-package aidermacs
  :ensure (aidermacs :type git :host github :repo "MatthewZMD/aidermacs" :branch "main" :files ("*.el"))
  :defer t
  :custom
  (aidermacs-backend 'vterm)
  (aidermacs-auto-commits nil)
  ;; (aidermacs-args '("--model" "ollama_chat/deepseek-r1"))
  (aidermacs-default-model "ollama_chat/qwen2.5-coder:14b")
  (aidermacs-use-architect-mode t)
  (aidermacs-architect-model "ollama_chat/deepseek-r1")
  (aidermacs-editor-model "ollama_chat/qwen2.5-coder:14b")
  :commands (aidermacs-transient-menu)
  :config
  (setenv "OLLAMA_API_BASE" "http://127.0.0.1:11434")
  (let ((models '("ollama_chat/deepseek-r1"
                  "ollama_chat/llama3.1:8b"
                  "ollama_chat/deepseek-coder-v2"
                  "ollama_chat/qwen2.5:3b"
                  "ollama_chat/qwen2.5-coder:14b")))
    (mapc (lambda (x) (add-to-list 'aidermacs-popular-models x)) models)))
#+end_src

* Provide
:PROPERTIES:
:CUSTOM_ID: provide
:END:
#+begin_src emacs-lisp
(provide 'ai)
#+end_src
