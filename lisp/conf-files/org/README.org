#+TITLE:XenHunt Config (org)
#+AUTHOR: Evgeny Berlizov (XenHunt)
#+DESCRIPTION: XenHunt's config of org
#+STARTUP: content
#+PROPERTY: header-args :tangle org-mine.el

* Содержание
:PROPERTIES:
:TOC:      :include all :depth 100 :force (nothing) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#введение][Введение]]
- [[#fast-loading][Fast-Loading]]
- [[#org-mode][Org-Mode]]
  - [[#ret---open-link-or-exec-src-block][RET - open link or exec src block]]
  - [[#org-agenda][Org-Agenda]]
  - [[#hover-links][Hover Links]]
  - [[#org-inline-images][Org Inline Images]]
  - [[#org-appear][Org-Appear]]
  - [[#toc][Toc]]
  - [[#highlight-todo][Highlight TODO]]
  - [[#org-bullets][Org-Bullets]]
  - [[#org-modern][Org-Modern]]
  - [[#org-modern-indent][Org-Modern-Indent]]
  - [[#org-tempo][Org Tempo]]
  - [[#org-headings-size][Org Headings Size]]
  - [[#org-auto-tangle][Org-Auto-Tangle]]
  - [[#org-roam][Org-Roam]]
  - [[#org-ql-roam][Org-QL-Roam]]
  - [[#org-fragtog][Org-Fragtog]]
  - [[#ob-async][OB-Async]]
  - [[#org-babel-load-languages][ORG-Babel-Load-Languages]]
  - [[#org-download][Org-Download]]
  - [[#org-ref][Org-Ref]]
  - [[#corg][Corg]]
  - [[#verb][Verb]]
  - [[#org-sticky-header][Org-Sticky-Header]]
  - [[#org-transclusion][Org-Transclusion]]
  - [[#раскладка][Раскладка]]
- [[#provide][Provide]]
:END:

* Введение
:PROPERTIES:
:CUSTOM_ID: введение
:END:

Эта часть конфига посвящена настройке =org-mode= в =Emacs=.

* Fast-Loading
:PROPERTIES:
:CUSTOM_ID: fast-loading
:END:

Быстрая загрузка модуля.

#+begin_src emacs-lisp
;; -*- lexical-binding: t;  no-byte-compile: t -*-
#+end_src

* Org-Mode
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:
** RET - open link or exec src block
:PROPERTIES:
:CUSTOM_ID: ret---open-link-or-exec-src-block
:END:

Мое решение (и =gptel=) для объединения открытия ссылки или запуска src block'а в Emacs одно клавишой =RET=.

#+begin_src emacs-lisp
(defun my/org-babel-execute-maybe ()
  "If point is at a source code block, execute it with org-babel."
  (interactive)
  (let ((context (org-element-context)))
    (when (and context
               (eq (car context) 'src-block))
      (org-babel-execute-src-block))))

(defun my/org-link-maybe ()
  "If point is at an org-mode link, open it."
  (interactive)
  (let ((context (org-element-context)))
    (when (and context
               (eq (car context) 'link))
      (org-open-at-point))))

(defun my/ret-keybindings ()
  "It combines mine maybe commands together"
  (interactive)
  (my/org-babel-execute-maybe)
  (my/org-link-maybe))


(evil-define-key 'normal org-mode-map (kbd "RET") 'my/ret-keybindings)

#+end_src

#+RESULTS:

** Org-Agenda
:PROPERTIES:
:CUSTOM_ID: org-agenda
:END:
#+begin_src emacs-lisp
(setq org-agenda-files (list "~/.org/roam/2024-08-21-22:56:38-планы.org"))
#+end_src

** Hover Links 
:PROPERTIES:
:CUSTOM_ID: hover-links
:END:
#+begin_src emacs-lisp
(setq org-mouse-1-follows-link t)
(setq org-descriptive-links t)
#+end_src
** Org Inline Images
:PROPERTIES:
:CUSTOM_ID: org-inline-images
:END:
#+begin_src  emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src

#+RESULTS:
: t

** Org-Appear 
:PROPERTIES:
:CUSTOM_ID: org-appear
:END:

=org-appear= - это пакет, позволяющий динамически скрывать/показывать специальные конструкции, такие как *выделение*, /курсив/, =хорошее выделение=, _подчеркивание_, [[ссылки]].

#+begin_src emacs-lisp
(use-package org-appear
  :defer 1
  :custom
  (org-appear-autoemphasis t)
  (org-appear-autolinks t)
  (org-appear-autosubmarkers t)
  (org-appear-autoentities t)
  (org-appear-autokeywords t)
  :config
  (add-hook 'org-mode-hook 'org-appear-mode)
  (setq org-appear-trigger 'manual)
  (add-hook 'org-mode-hook (lambda ()
                             (add-hook 'evil-insert-state-entry-hook
                                       #'org-appear-manual-start
                                       nil
                                       t)
                             (add-hook 'evil-insert-state-exit-hook
                                       #'org-appear-manual-stop
                                       nil
                                       t)))
  )
#+end_src
** Toc
:PROPERTIES:
:CUSTOM_ID: toc
:END:

=org-make-toc= - пакет для удобного добавления TOC - Table Of Content, оглавления в =org= файлах.

#+begin_src emacs-lisp
(use-package org-make-toc
  :defer 2
  :config
  (setq org-make-toc-insert-custom-ids t)
  (add-hook 'org-mode-hook #'org-make-toc-mode)
  (my/set-fonts)
  )
(elpaca-wait)
#+end_src
** Highlight TODO 
:PROPERTIES:
:CUSTOM_ID: highlight-todo
:END:

=hl-todo= - подсветка TODO и иже подобные вещи в =org=.

#+begin_src emacs-lisp
(use-package hl-todo
  :ensure (:depth nil)
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
** Org-Bullets
:PROPERTIES:
:CUSTOM_ID: org-bullets
:END:

=org-bullets= - это пакет, меняющий заголовки и превращающий их в нечто более красивое.

#+begin_src emacs-lisp
(setq org-startup-indented nil
      org-pretty-entities t)
;; (use-package org-bullets
;;   :config
;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
(elpaca-wait)
#+end_src

#+RESULTS:

** Org-Modern
:PROPERTIES:
:CUSTOM_ID: org-modern
:END:
#+begin_src emacs-lisp
(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :custom
  (org-modern-hide-stars nil)		; adds extra indentation
  ;; (org-modern-table nil)
  (org-modern-list 
   '(;; (?- . "-")
     (?* . "•")
     (?+ . "‣")))
  (org-modern-block-name '("" . "")) ; or other chars; so top bracket is drawn promptly
  )
#+end_src

#+RESULTS:
: [nil 26321 35790 743497 nil elpaca-process-queues nil nil 928000 nil]

** Org-Modern-Indent
:PROPERTIES:
:CUSTOM_ID: org-modern-indent
:END:

=org-modern-indent= добавляет красивое выделение для блоков в =org=.

#+begin_src emacs-lisp
(use-package org-modern-indent
  :ensure (:host github :repo "jdtsmith/org-modern-indent")
  :after org-modern
  :config
  (add-hook 'org-mode-hook #'org-modern-indent-mode 90)
  )
#+end_src

#+RESULTS:
: [nil 26321 37179 983531 nil elpaca-process-queues nil nil 850000 nil]

** Org Tempo 
:PROPERTIES:
:CUSTOM_ID: org-tempo
:END:

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Org Headings Size 
:PROPERTIES:
:CUSTOM_ID: org-headings-size
:END:
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

** Org-Auto-Tangle 
:PROPERTIES:
:CUSTOM_ID: org-auto-tangle
:END:

=org-auto-tangle= - это пакет, позволяющий автоматически при сохранении =org= файла импортировать весь код из блоков в файлы.

#+begin_src emacs-lisp
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** Org-Roam 
:PROPERTIES:
:CUSTOM_ID: org-roam
:END:

=org-roam= - это пакет, позволяющий создать полноценную систему заметок согласно методу =Zettelkasten=, использую лишь =org= файлы.

#+begin_src emacs-lisp
(use-package org-roam
  :defer 3
  :custom
  (org-roam-complete-everywhere t)
  :config
  (if (not (file-directory-p (file-truename "~/.org/roam")))
      (make-directory (file-truename "~/.org/roam")))
  (setq org-roam-directory "/home/berlizoves/.org/roam/")
  (setq org-roam-node-display-template "${title:*} ${tags:45}")
  (org-roam-db-autosync-enable)
  ;; (map! :leader
  ;;       (:prefix ("n r" . "org-roam")
  ;;                :desc "Completion at point"      "c" #'completion-at-point
  ;;                :desc "Find node"                "f" #'org-roam-node-find
  ;;                :desc "Show graph"               "g" #'org-roam-graph
  ;;                :desc "Insert node"              "i" #'org-roam-node-insert
  ;;                :desc "Create id for header"     "I" #'org-id-get-create
  ;;                :desc "Capture to node"          "n" #'org-roam-capture
  ;;                :desc "Toggle roam buffer"       "r" #'org-roam-buffer-toggle
  ;;                :desc "Start org-roam-ui in web" "u" #'org-roam-ui-mode
  ;;                :desc "Reload org-roam db"       "d" #'org-roam-db-sync
  ;;                :desc "Insert tag"               "t" #'org-roam-tag-add
  ;;                :desc "Remove tag"               "T" #'org-roam-tag-remove
  ;;                :desc "Add alias"                "a" #'org-roam-alias-add
  ;;                :desc "Remove alias"             "A" #'org-roam-alias-remove)
  ;;       (:prefix ("n j" . "org-roam-daily")
  ;;                :desc "Add today note entry"   "a" #'org-roam-dailies-capture-today
  ;;                :desc "Go to today note"       "A" #'org-roam-dailies-goto-today
  ;;                :desc "Add note entry by date" "d" #'org-roam-dailies-capture-date
  ;;                :desc "Go to note by date"     "D" #'org-roam-dailies-goto-date
  ;;                :desc "Find note in directory" "f" #'org-roam-dailies-find-directory
  ;;                ))
  (leader-key
    "n" '(:ignore t :wk "Org-Roam/Notes")
    ;; "n f" '(org-roam-node-find :wk "Find Node")
    "n g" '(org-roam-graph :wk "Show Graph")
    "n i" '(org-roam-node-insert :wk "Insert Node")
    "n I" '(org-id-get-create :wk "Create id for header")
    "n n" '(org-roam-node-find :wk "Find Node")
    "n r" '(org-roam-buffer-toggle :wk "Toggle roam buffer")
    "n u" '(org-roam-ui-mode :wk "Start org-roam-ui in web")
    "n d" '(org-roam-db-sync :wk "Reaload org-roam db")
    "n t" '(org-roam-tag-add :wk "Insert tag")
    "n T" '(org-roam-tag-remove :wk "Remove tag")
    "n a" '(org-roam-alias-add :wk "Add alias")
    "n A" '(org-roam-alias-remove :wk "Remove alias")
    ;; Dailies
    "n j" '(:ignore t :wk "Org-Roam-Dailies")
    "n j a" '(org-roam-dailies-capture-today :wk "Add today note entry")
    "n j A" '(org-roam-dailies-goto-today :wk "Go to today note")
    "n j d" '(org-roam-dailies-capture-date :wk "Add note entry by date")
    "n j D" '(org-roam-dailies-goto-date :wk "Go to note by date")
    )

  
  (setq org-roam-capture-templates
        '(
          ("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
          ("b" "book notes" plain
           (file "~/.org/roam/templates/book_notes_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Book_notes:\n#+pers_rating:\n")
           :unnarrowed t)
          ("m" "library or module of pr-ing language" plain
           (file "~/.org/roam/templates/programming_module_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Library:Programming:\n")
           :unnarrowed t
           )
          ("l" "lecture" plain
           (file "~/.org/roam/templates/lecture_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Lecture:\n")
           :unnarrowed t
           )
          ("B" "programming book notes" plain
           (file "~/.org/roam/templates/programming_book_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Book_notes:Programming:\n#+pers_rating:\n")
           :unnarrowed t
           )
          ("h" "habr article" plain
           (file "~/.org/roam/templates/habr_article_template.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Article:Programming:Habr:\n#+pers_rating:\n")
           :unnarrowed t
           )
          ("o" "definition" plain
           (file "~/.org/roam/templates/definition.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
          ("t" "data type" plain
           (file "~/.org/roam/templates/data_type.org")
           :if-new (file+head "%<%Y-%m-%d-%H:%M:%S>-${slug}.org"
                              "#+title: ${title}\n#+date: %U\n#+filetags: :Data_Type:Programming:")
           :unnarrowed t)
          )         
        )
  
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry "* %<%I:%M %p>\n%?"
           :if-new (file+head "%<%Y-%m-%d>.org" "#+title:%<%Y-%m-%d>\n#+filetags: :Dailies:"))))
  )
(elpaca-wait)
;; (use-package websoket

;;   :after org-roam)

(use-package org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
(elpaca-wait)
#+end_src

#+RESULTS:
| d | default | entry | * %<%I:%M %p> |

** Org-QL-Roam
:PROPERTIES:
:CUSTOM_ID: org-ql-roam
:END:

=org-ql-roam= - просто обычный пакет, для обращения к =org-roam= при помощи =SQL=.

#+begin_src emacs-lisp 
(use-package org-roam-ql
  :defer 3
  :after (org-roam)
  )
#+end_src

** Org-Fragtog
:PROPERTIES:
:CUSTOM_ID: org-fragtog
:END:

=org-fragtog= - это пакет похожий на =org-appear=, но для =LaTex= функций и конструкций. 

#+begin_src emacs-lisp 
(use-package org-fragtog
:after org
:hook (org-mode . org-fragtog-mode) ; this auto-enables it when you enter an org-buffer, remove if you do not want this
:config
;; whatever you want
)
#+end_src

** OB-Async
:PROPERTIES:
:CUSTOM_ID: ob-async
:END:

=ob-async= - асинхронное выполнение src блоков в =org=.

#+begin_src emacs-lisp
(use-package ob-async
  :config

(setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia" "jupyter-R"))
)
#+end_src

** ORG-Babel-Load-Languages 
:PROPERTIES:
:CUSTOM_ID: org-babel-load-languages
:END:
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-confirm-babel-evaluate nil)
(require 'ob-clojure)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (shell . t)
   (clojure . t)))

#+end_src

#+RESULTS:

** Org-Download 
:PROPERTIES:
:CUSTOM_ID: org-download
:END:

=org-download= - drag-and-drop для =org=.

#+begin_src emacs-lisp
(use-package org-download
  :defer 4
  :config
  (add-hook 'dired-mode-hook 'org-download-enable)
  (setq org-download-image-dir "./.images")
  )
#+end_src

** Org-Ref
:PROPERTIES:
:CUSTOM_ID: org-ref
:END:

=org-ref= позволяет создавать цитаты, кросреференсы, индексы и глоссарии как ссылку в =org=.

:PROPERTIES:
:CUSTOM_ID: org-ref
:END:
#+begin_src emacs-lisp
(use-package org-ref
:no-require t)

#+end_src
** Corg
:PROPERTIES:
:CUSTOM_ID: corg
:END:

=corg= добавляет автоподстановку в src блоки и им подобные.

#+begin_src emacs-lisp
(use-package corg
  :ensure (:host github :repo "isamert/corg.el"))
#+end_src
** Verb
:PROPERTIES:
:CUSTOM_ID: verb
:END:

Обычный REST клиент при помощи =org=.

#+begin_src emacs-lisp
(use-package verb
  :defer 5
  :after org
  :config
  ;; (verb-util--log)
)
#+end_src
** Org-Sticky-Header
:PROPERTIES:
:CUSTOM_ID: org-sticky-header
:END:
#+begin_src emacs-lisp
(use-package org-sticky-header)
#+end_src

#+RESULTS:
: [nil 26321 39101 48239 nil elpaca-process-queues nil nil 512000 nil]
** Org-Transclusion
:PROPERTIES:
:CUSTOM_ID: org-transclusion
:END:
#+begin_src emacs-lisp
(use-package org-transclusion
  :after org
  :hook (org-mode . org-transclusion-mode)
  :init
  )
#+end_src

#+RESULTS:
: [nil 26321 40045 673291 nil elpaca-process-queues nil nil 408000 nil]

** TODO Раскладка
:PROPERTIES:
:CUSTOM_ID: раскладка
:END:
[[https://github.com/doomemacs/doomemacs/blob/master/modules/lang/org/config.el][Doom-Config Org-Mode]]
Команда для быстрой вставки =:wk "<группа_1>"= - =%s/\("[^"]*"\) '(\([^):]*\))/\1 '(\2 :wk "\2")=
#+begin_src emacs-lisp
(general-define-key
 :states 'normal
 :keymaps 'org-mode-map
 :prefix "]"
 "h" '(org-next-visible-heading :wk "org-next-visible-heading")
 )

(general-define-key
 :states 'normal
 :keymaps 'org-mode-map
 :prefix "["
 "h" '(org-previous-visible-heading :wk "org-previous-visible-heading")
 )

(general-define-key
 ;; :definer 'minor-mode
 :states 'normal
 :keymaps 'org-mode-map
 :prefix "SPC"
 "m" '(:ignore :wk "Org-Mode Commands")
 "m #" '(org-update-statistics-cookies :wk "org-update-statistics-cookies")
 "m '" '(org-edit-special :wk "org-edit-special")
 "m *" '(org-ctrl-c-star :wk "org-ctrl-c-star")
 "m +" '(org-ctrl-c-minus :wk "org-ctrl-c-minus")
 "m ," '(org-switchb :wk "org-switchb")
 "m ." '(org-goto :wk "org-goto")
 "m @" '(org-cite-insert :wk "org-cite-insert")
 "m ." '(consult-org-heading :wk "consult-org-heading")
 "m /" '(consult-org-agenda :wk "consult-org-agenda")
 "m A" '(org-archive-subtree-default :wk "org-archive-subtree-default")
 "m e" '(org-export-dispatch :wk "org-export-dispatch")
 "m f" '(org-footnote-action :wk "org-footnote-action")
 "m h" '(org-toggle-heading :wk "org-toggle-heading")
 "m i" '(org-toggle-item :wk "org-toggle-item")
 "m I" '(org-id-get-create :wk "org-id-get-create")
 "m k" '(org-babel-remove-result :wk "org-babel-remove-result")
 "m n" '(org-store-link :wk "org-store-link")
 "m o" '(org-set-property :wk "org-set-property")
 "m q" '(org-set-tags-command :wk "org-set-tags-command")
 "m t" '(org-todo :wk "org-todo")
 "m T" '(org-todo-list :wk "org-todo-list")
 "m x" '(org-toggle-checkbox :wk "org-toggle-checkbox")
 
 ;; Attachments
 "m a" '(:ignore :wk "Attachments")
 "m a a" '(org-attach :wk "org-attach")
 "m a d" '(org-attach-delete-one :wk "org-attach-delete-one")
 "m a D" '(org-attach-delete-all :wk "org-attach-delete-all")
 "m a n" '(org-attach-new :wk "org-attach-new")
 "m a o" '(org-attach-open :wk "org-attach-open")
 "m a O" '(org-attach-open-in-emacs :wk "org-attach-open-in-emacs")
 "m a r" '(org-attach-reveal :wk "org-attach-reveal")
 "m a R" '(org-attach-reveal-in-emacs :wk "org-attach-reveal-in-emacs")
 "m a u" '(org-attach-url :wk "org-attach-url")
 "m a s" '(org-attach-set-directory :wk "org-attach-set-directory")
 "m a S" '(org-attach-sync :wk "org-attach-sync")
 "m a c" '(org-download-screenshot :wk "org-download-screenshot")
 "m a p" '(org-download-clipboard :wk "org-download-clipboard")
 "m a P" '(org-download-yank :wk "org-download-yank")

 ;;Tables
 "m b" '(ignore :wk "Tables")
 "m b -" '(org-table-insert-hline :wk "org-table-insert-hline")
 "m b a" '(org-table-align :wk "org-table-align")
 "m b b" '(org-table-blank-field :wk "org-table-blank-field")
 "m b e" '(org-table-edit-field :wk "org-table-edit-field")
 "m b f" '(org-table-edit-formulas :wk "org-table-edit-formulas")
 "m b h" '(org-table-field-info :wk "org-table-field-info")
 "m b s" '(org-table-sort-lines :wk "org-table-sort-lines")
 "m b r" '(org-table-recalculate :wk "org-table-recalculate")
 "m b R" '(org-table-recalculate-buffer-tables :wk "org-table-recalculate-buffer-tables")
 "m b d" '(:ignore :wk "Delete")
 "m b d c" '(org-table-delete-column :wk "org-table-delete-column")
 "m b d r" '(org-table-kill-row :wk "org-table-kill-row")
 "m b i" '(:ignore :wk "Insert")
 "m b i c" '(org-table-insert-column :wk "org-table-insert-column")
 "m b i h" '(org-table-insert-hline :wk "org-table-insert-hline")
 "m b i r" '(org-table-insert-row :wk "org-table-insert-row")
 "m b i H" '(org-table-hline-and-move :wk "org-table-hline-and-move")
 "m b t" '(:ingore :wk "Table")
 "m b t f" '(org-table-toggle-formula-debugger :wk "org-table-toggle-formula-debugger")
 "m b t o" '(org-table-toggle-coordinate-overlays :wk "org-table-toggle-coordinate-overlays")
 "m b c" '(:ignore :wk "Clock")
 "m b c c" '(org-clock-cancel :wk "org-clock-cancel")
 )

;; (general-def 'normal 'override "C-x C-x" """)
#+end_src

#+RESULTS:
* Provide
:PROPERTIES:
:CUSTOM_ID: provide
:END:
#+begin_src emacs-lisp
(provide 'org-mine)


#+end_src
